<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lei&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-25T03:00:18.140Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang Lei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人 ios 和 mac 应用推荐</title>
    <link href="http://yoursite.com/2019/01/24/%E4%B8%AA%E4%BA%BAios%E5%92%8Cmac%E5%BA%94%E7%94%A8%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2019/01/24/个人ios和mac应用推荐/</id>
    <published>2019-01-24T13:45:05.000Z</published>
    <updated>2019-01-25T03:00:18.140Z</updated>
    
    <content type="html"><![CDATA[<p>年初整理一下自己设备上目前一些常用或喜爱的应用软件。</p><h1 id="iso-应用"><a href="#iso-应用" class="headerlink" title="iso 应用"></a>iso 应用</h1><h4 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h4><p><a href="https://itunes.apple.com/cn/app/spark-readdle-%E5%87%BA%E5%93%81%E7%9A%84%E9%82%AE%E7%AE%B1%E5%BA%94%E7%94%A8/id997102246?mt=8" target="_blank" rel="noopener">‎Spark</a>：Readdle 家的邮件客户端，用来管理自己的私人和公司邮件，所登陆邮箱随账号同步。</p><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><p><a href="https://itunes.apple.com/cn/app/%E7%86%8A%E6%8E%8C%E8%AE%B0/id1016366447" target="_blank" rel="noopener">熊掌记(Bear)</a>：熊掌记是一款优雅、灵活的写作笔记应用，通过 icloud 同步，用来记录自己日常的学习和工作笔记。</p><h4 id="记账"><a href="#记账" class="headerlink" title="记账"></a>记账</h4><p><a href="https://itunes.apple.com/cn/app/moze-pro/id983599398?mt=8" target="_blank" rel="noopener">‎MOZE PRO</a>：一款有名的记账软件，贵在坚持吧。</p><h4 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h4><p><a href="https://itunes.apple.com/cn/app/1password-password-manager/id568903335?mt=8" target="_blank" rel="noopener">1Password</a>：一款最有名的密码管理工具，支持 Face ID ，可以很便捷的登陆账户，千万要记住密码库的主密码，里面的 一些账户登陆密码可以不用去记忆，可以直接用 1Password 生成密码保存登陆信息就好，但是一些重要账户的密码自己记忆一下为好。这样可以避免自己的各个账户使用同一个密码的尴尬情况。除此之外，自己也会记录一些重要的文件和软件激活码。</p><h4 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h4><p><a href="https://itunes.apple.com/cn/app/things-3/id904237743?mt=8" target="_blank" rel="noopener">‎Things 3</a>：一款有名的自己认为很好看的待办应用软件，规划好自己的生活和工作计划，养成一种良好的习惯。</p><h4 id="播客"><a href="#播客" class="headerlink" title="播客"></a>播客</h4><p><a href="https://itunes.apple.com/cn/app/pocket-casts/id414834813?mt=8" target="_blank" rel="noopener">‎Pocket Casts</a>：老牌的播客应用了，由于之前用 的它的 Android 端，有账户信息同步，ios 上也就习惯用它了。</p><h4 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h4><p><a href="https://itunes.apple.com/us/app/spotify-music/id324684580?mt=8" target="_blank" rel="noopener">‎Spotify Music</a>：自己订阅了一年美区的，在 ps4，mac 和手机上可以相互控制播放。</p><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><p><a href="https://itunes.apple.com/cn/app/documents-by-readdle/id364901807?l=en&amp;mt=8" target="_blank" rel="noopener">‎Documents</a>：Readdle 家的文件管理应用，自己主要用来看 PDF 文档。</p><p><a href="https://itunes.apple.com/cn/app/moke-%E7%BA%AF%E7%B2%B9%E5%BE%AE%E5%8D%9A%E4%BD%93%E9%AA%8C/id880813963?mt=8" target="_blank" rel="noopener">‎Moke</a>：一款优美的微博客户端，纯粹的微博阅读体验。</p><p><a href="https://itunes.apple.com/cn/app/reeder-3/id697846300?mt=8" target="_blank" rel="noopener">‎Reeder 3</a>：阅读一些订阅信息。</p><h4 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h4><p><a href="https://itunes.apple.com/cn/app/telegram-messenger/id686449807?mt=8" target="_blank" rel="noopener">‎Telegram</a>：simple, fast, secure, and synced across all your devices. </p><h4 id="云盘"><a href="#云盘" class="headerlink" title="云盘"></a>云盘</h4><p><a href="https://itunes.apple.com/cn/app/microsoft-onedrive/id477537958?mt=8" target="_blank" rel="noopener">OneDrive</a>：由于自己订阅了一年的 Office 365 ，会有 1T OneDrive 存储空间，主要同步存储一些文件。</p><p><a href="https://itunes.apple.com/cn/app/google-photos/id962194608?l=en&amp;mt=8" target="_blank" rel="noopener">Google Photos</a>：高画质存储自己的照片，无限免费存储空间。</p><h4 id="SSH-工具"><a href="#SSH-工具" class="headerlink" title="SSH 工具"></a>SSH 工具</h4><p><a href="https://itunes.apple.com/cn/app/prompt-2/id917437289?mt=8" target="_blank" rel="noopener">‎Prompt 2</a>：一款著名的 ios 上的 SSH 软件，有时电脑不在身边，需要在手机上临时登陆服务器查看一些问题。</p><h4 id="代理工具"><a href="#代理工具" class="headerlink" title="代理工具"></a>代理工具</h4><p><a href="https://itunes.apple.com/us/app/shadowrocket/id932747118?mt=8" target="_blank" rel="noopener">‎Shadowrocket</a>：美区下载，国区已下架。</p><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p><a href="https://itunes.apple.com/cn/app/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E6%B3%A8%E5%86%8C%E9%80%8130%E5%85%83%E6%96%B0%E4%BA%BA%E7%A4%BC%E5%88%B8/id1280245865?mt=8" target="_blank" rel="noopener">极客时间</a>：一款 IT 类知识服务软件，扩宽自己的技术知识。</p><p><a href="https://itunes.apple.com/cn/app/%E5%A2%A8%E5%A2%A8%E8%83%8C%E5%8D%95%E8%AF%8D-%E5%9B%9B%E5%85%AD%E7%BA%A7%E8%80%83%E7%A0%94%E7%AD%89%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87%E8%AE%B0%E5%BF%86/id888483369?mt=8" target="_blank" rel="noopener">‎墨墨背单词</a>：用来学习英语。</p><p><a href="https://itunes.apple.com/cn/app/pphub-for-github/id1314212521?mt=8" target="_blank" rel="noopener">PPHub</a>：一个简洁漂亮的 GitHub 客户端。</p><p><a href="https://itunes.apple.com/cn/app/50%E9%9F%B3%E8%B5%B7%E6%BA%90/id1439222882?mt=8" target="_blank" rel="noopener">‎50音起源</a>：日语学习，主要比较关注这个开发者。</p><h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><p><a href="https://itunes.apple.com/cn/app/%E5%B0%8F%E5%8E%86-%E5%B0%8F%E8%80%8C%E7%BE%8E%E7%9A%84%E6%97%A5%E5%8E%86/id1031088612?mt=8" target="_blank" rel="noopener">‎小历</a>：主要在 Widgets 查看日历和法定节假日。</p><p><a href="https://itunes.apple.com/cn/app/%E6%8D%B7%E5%BE%84/id915249334?mt=8" target="_blank" rel="noopener">‎捷径</a>：效率工具，为喜爱的应用创建包括多个步骤的个性化捷径。</p><p><a href="https://itunes.apple.com/cn/app/picsew-%E9%95%BF%E6%88%AA%E5%9B%BE%E5%92%8C%E9%95%BF%E5%9B%BE%E6%8B%BC%E6%8E%A5/id1208145167?mt=8" target="_blank" rel="noopener">‎Picsew</a>：长图拼接工具。</p><p><a href="https://itunes.apple.com/cn/app/%E6%97%B6%E9%97%B4%E5%8D%A1-%E7%B2%BE%E8%87%B4%E7%9A%84%E7%BA%AA%E5%BF%B5%E6%97%A5%E5%8A%A9%E6%89%8B/id1347998487?mt=8" target="_blank" rel="noopener">‎时间卡</a>：界面优美的倒计时和累积日工具，记录重要纪念日。</p><a id="more"></a><h1 id="Mac-应用"><a href="#Mac-应用" class="headerlink" title="Mac 应用"></a>Mac 应用</h1><h4 id="笔记-1"><a href="#笔记-1" class="headerlink" title="笔记"></a>笔记</h4><p><a href="https://itunes.apple.com/cn/app/%E7%86%8A%E6%8E%8C%E8%AE%B0/id1091189122?mt=12" target="_blank" rel="noopener">熊掌记(Bear)</a>：熊掌记是一款优雅、灵活的写作笔记应用，通过 icloud 同步，用来记录自己日常的学习和工作笔记。</p><h4 id="邮箱-1"><a href="#邮箱-1" class="headerlink" title="邮箱"></a>邮箱</h4><p><a href="https://itunes.apple.com/cn/app/spark-readdle-%E5%87%BA%E5%93%81%E7%9A%84%E9%82%AE%E7%AE%B1%E5%BA%94%E7%94%A8/id1176895641?mt=12" target="_blank" rel="noopener">‎Spark</a>：Readdle 家的邮件客户端，用来管理自己的私人和公司邮件，所登陆邮箱随账号同步。</p><h4 id="密码管理-1"><a href="#密码管理-1" class="headerlink" title="密码管理"></a>密码管理</h4><p><a href="https://1password.com/downloads/mac/" target="_blank" rel="noopener">1Password</a>：一款最有名的密码管理工具，可以很便捷的登陆账户，千万要记住密码库的主密码，里面的 一些账户登陆密码可以不用去记忆，可以直接用 1Password 生成密码保存登陆信息就好，但是一些重要账户的密码自己记忆一下为好。这样可以避免自己的各个账户使用同一个密码的尴尬情况。除此之外，自己也会记录一些重要的文件和软件激活码。</p><h4 id="待办-1"><a href="#待办-1" class="headerlink" title="待办"></a>待办</h4><p>使用 Mac 自带的提醒事项，可以同步到手机端 Things 3 的收件箱。</p><h4 id="音乐-1"><a href="#音乐-1" class="headerlink" title="音乐"></a>音乐</h4><p><a href="https://itunes.apple.com/us/app/spotify-music/id324684580?mt=8" target="_blank" rel="noopener">‎Spotify Music</a>：自己订阅了一年美区的，在 ps4，mac 和手机上可以相互控制播放。</p><h4 id="阅读-1"><a href="#阅读-1" class="headerlink" title="阅读"></a>阅读</h4><p><a href="https://skim-app.sourceforge.io/" target="_blank" rel="noopener">Skim</a>：一款免费的 PDF 阅读器。</p><h4 id="IM-1"><a href="#IM-1" class="headerlink" title="IM"></a>IM</h4><p><a href="https://desktop.telegram.org/" target="_blank" rel="noopener">Telegram Desktop</a>：simple, fast, secure, and synced across all your devices. </p><h4 id="代理工具-1"><a href="#代理工具-1" class="headerlink" title="代理工具"></a>代理工具</h4><p><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">ShadowsocksX-NG</a>：开启代理。</p><p><a href="http://www.proxifier.com/" target="_blank" rel="noopener">Proxifier</a>：用来配置应用是否走代理。</p><h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h4><p><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">Oracle VM VirtualBox</a>：虚拟机，工作需要，有可能会用到 Windows。</p><h4 id="挨踢"><a href="#挨踢" class="headerlink" title="挨踢"></a>挨踢</h4><p><a href="https://iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm2</a>：终端。</p><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>：代码编辑器。</p><p><a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash</a>：Dash is an API Documentation Browser and Code Snippet Manager. </p><p><a href="https://www.smartsvn.com/" target="_blank" rel="noopener">SmartSVN</a>：一款 SVN 的客户端。免费版已满足我需求。</p><p><a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub Desktop</a>：一款 GitHub 的客户端。</p><p><a href="https://sequelpro.com/test-builds" target="_blank" rel="noopener">Sequel Pro</a>：一款 MySQL  的客户端，正式版好久没更新了，存在一些 bug，推荐使用 build 版本。</p><p><a href="https://www.oracle.com/technetwork/developer-tools/sql-developer/downloads/index.html" target="_blank" rel="noopener">SQL Developer</a>：一款官方的 Oracle 免费客户端。</p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p><a href="https://binarynights.com/" target="_blank" rel="noopener">ForkLift 3</a>：一款优美的文件管理器和 FTP 客户端。</p><p><a href="https://products.office.com/zh-cn/home" target="_blank" rel="noopener">Office 365</a>：Office 套装。</p><h4 id="小工具-1"><a href="#小工具-1" class="headerlink" title="小工具"></a>小工具</h4><p><a href="https://www.macbartender.com/" target="_blank" rel="noopener">Bartender 3</a>：管理菜单栏图标。</p><p><a href="https://macpaw.com/cleanmymac-3" target="_blank" rel="noopener">CleanMyMac 3</a>：垃圾清理。</p><p><a href="https://www.keka.io/en/" target="_blank" rel="noopener">Keka</a>：文件解压缩工具。</p><p><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred 3</a>：目前只用来启动应用和查找文件，功能太多了，待发掘。</p><p><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">Snipaste</a>：用来截屏和贴图。</p><p><a href="https://bjango.com/mac/istatmenus/" target="_blank" rel="noopener">iStat Menus</a>：目前正常情况下主要用来显示网速，查看网络，显示进程。</p><p><a href="http://magnet.crowdcafe.com/" target="_blank" rel="noopener">Magnet</a>：应用窗口管理工具。</p><p><a href="https://justgetflux.com/" target="_blank" rel="noopener">f.lux</a>：调节电脑屏幕的显示，避免屏幕太刺眼睛。</p><p><a href="https://itunes.apple.com/us/app/irvue/id1039633667?mt=12" target="_blank" rel="noopener">‎Irvue</a>：高质量的壁纸应用，可设置自动切换的时间。</p><p><a href="https://pasteapp.me/" target="_blank" rel="noopener">Paste</a>：记录复制的历史，方便选择性粘贴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年初整理一下自己设备上目前一些常用或喜爱的应用软件。&lt;/p&gt;
&lt;h1 id=&quot;iso-应用&quot;&gt;&lt;a href=&quot;#iso-应用&quot; class=&quot;headerlink&quot; title=&quot;iso 应用&quot;&gt;&lt;/a&gt;iso 应用&lt;/h1&gt;&lt;h4 id=&quot;邮箱&quot;&gt;&lt;a href=&quot;#邮箱&quot; class=&quot;headerlink&quot; title=&quot;邮箱&quot;&gt;&lt;/a&gt;邮箱&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/spark-readdle-%E5%87%BA%E5%93%81%E7%9A%84%E9%82%AE%E7%AE%B1%E5%BA%94%E7%94%A8/id997102246?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Spark&lt;/a&gt;：Readdle 家的邮件客户端，用来管理自己的私人和公司邮件，所登陆邮箱随账号同步。&lt;/p&gt;
&lt;h4 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/%E7%86%8A%E6%8E%8C%E8%AE%B0/id1016366447&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;熊掌记(Bear)&lt;/a&gt;：熊掌记是一款优雅、灵活的写作笔记应用，通过 icloud 同步，用来记录自己日常的学习和工作笔记。&lt;/p&gt;
&lt;h4 id=&quot;记账&quot;&gt;&lt;a href=&quot;#记账&quot; class=&quot;headerlink&quot; title=&quot;记账&quot;&gt;&lt;/a&gt;记账&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/moze-pro/id983599398?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎MOZE PRO&lt;/a&gt;：一款有名的记账软件，贵在坚持吧。&lt;/p&gt;
&lt;h4 id=&quot;密码管理&quot;&gt;&lt;a href=&quot;#密码管理&quot; class=&quot;headerlink&quot; title=&quot;密码管理&quot;&gt;&lt;/a&gt;密码管理&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/1password-password-manager/id568903335?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1Password&lt;/a&gt;：一款最有名的密码管理工具，支持 Face ID ，可以很便捷的登陆账户，千万要记住密码库的主密码，里面的 一些账户登陆密码可以不用去记忆，可以直接用 1Password 生成密码保存登陆信息就好，但是一些重要账户的密码自己记忆一下为好。这样可以避免自己的各个账户使用同一个密码的尴尬情况。除此之外，自己也会记录一些重要的文件和软件激活码。&lt;/p&gt;
&lt;h4 id=&quot;待办&quot;&gt;&lt;a href=&quot;#待办&quot; class=&quot;headerlink&quot; title=&quot;待办&quot;&gt;&lt;/a&gt;待办&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/things-3/id904237743?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Things 3&lt;/a&gt;：一款有名的自己认为很好看的待办应用软件，规划好自己的生活和工作计划，养成一种良好的习惯。&lt;/p&gt;
&lt;h4 id=&quot;播客&quot;&gt;&lt;a href=&quot;#播客&quot; class=&quot;headerlink&quot; title=&quot;播客&quot;&gt;&lt;/a&gt;播客&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/pocket-casts/id414834813?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Pocket Casts&lt;/a&gt;：老牌的播客应用了，由于之前用 的它的 Android 端，有账户信息同步，ios 上也就习惯用它了。&lt;/p&gt;
&lt;h4 id=&quot;音乐&quot;&gt;&lt;a href=&quot;#音乐&quot; class=&quot;headerlink&quot; title=&quot;音乐&quot;&gt;&lt;/a&gt;音乐&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/spotify-music/id324684580?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Spotify Music&lt;/a&gt;：自己订阅了一年美区的，在 ps4，mac 和手机上可以相互控制播放。&lt;/p&gt;
&lt;h4 id=&quot;阅读&quot;&gt;&lt;a href=&quot;#阅读&quot; class=&quot;headerlink&quot; title=&quot;阅读&quot;&gt;&lt;/a&gt;阅读&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/documents-by-readdle/id364901807?l=en&amp;amp;mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Documents&lt;/a&gt;：Readdle 家的文件管理应用，自己主要用来看 PDF 文档。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/moke-%E7%BA%AF%E7%B2%B9%E5%BE%AE%E5%8D%9A%E4%BD%93%E9%AA%8C/id880813963?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Moke&lt;/a&gt;：一款优美的微博客户端，纯粹的微博阅读体验。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/reeder-3/id697846300?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Reeder 3&lt;/a&gt;：阅读一些订阅信息。&lt;/p&gt;
&lt;h4 id=&quot;IM&quot;&gt;&lt;a href=&quot;#IM&quot; class=&quot;headerlink&quot; title=&quot;IM&quot;&gt;&lt;/a&gt;IM&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/telegram-messenger/id686449807?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Telegram&lt;/a&gt;：simple, fast, secure, and synced across all your devices. &lt;/p&gt;
&lt;h4 id=&quot;云盘&quot;&gt;&lt;a href=&quot;#云盘&quot; class=&quot;headerlink&quot; title=&quot;云盘&quot;&gt;&lt;/a&gt;云盘&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/microsoft-onedrive/id477537958?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OneDrive&lt;/a&gt;：由于自己订阅了一年的 Office 365 ，会有 1T OneDrive 存储空间，主要同步存储一些文件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/google-photos/id962194608?l=en&amp;amp;mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Photos&lt;/a&gt;：高画质存储自己的照片，无限免费存储空间。&lt;/p&gt;
&lt;h4 id=&quot;SSH-工具&quot;&gt;&lt;a href=&quot;#SSH-工具&quot; class=&quot;headerlink&quot; title=&quot;SSH 工具&quot;&gt;&lt;/a&gt;SSH 工具&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/prompt-2/id917437289?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Prompt 2&lt;/a&gt;：一款著名的 ios 上的 SSH 软件，有时电脑不在身边，需要在手机上临时登陆服务器查看一些问题。&lt;/p&gt;
&lt;h4 id=&quot;代理工具&quot;&gt;&lt;a href=&quot;#代理工具&quot; class=&quot;headerlink&quot; title=&quot;代理工具&quot;&gt;&lt;/a&gt;代理工具&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/shadowrocket/id932747118?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Shadowrocket&lt;/a&gt;：美区下载，国区已下架。&lt;/p&gt;
&lt;h4 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; title=&quot;学习&quot;&gt;&lt;/a&gt;学习&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E6%B3%A8%E5%86%8C%E9%80%8130%E5%85%83%E6%96%B0%E4%BA%BA%E7%A4%BC%E5%88%B8/id1280245865?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;极客时间&lt;/a&gt;：一款 IT 类知识服务软件，扩宽自己的技术知识。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/%E5%A2%A8%E5%A2%A8%E8%83%8C%E5%8D%95%E8%AF%8D-%E5%9B%9B%E5%85%AD%E7%BA%A7%E8%80%83%E7%A0%94%E7%AD%89%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87%E8%AE%B0%E5%BF%86/id888483369?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎墨墨背单词&lt;/a&gt;：用来学习英语。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/pphub-for-github/id1314212521?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PPHub&lt;/a&gt;：一个简洁漂亮的 GitHub 客户端。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/50%E9%9F%B3%E8%B5%B7%E6%BA%90/id1439222882?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎50音起源&lt;/a&gt;：日语学习，主要比较关注这个开发者。&lt;/p&gt;
&lt;h4 id=&quot;小工具&quot;&gt;&lt;a href=&quot;#小工具&quot; class=&quot;headerlink&quot; title=&quot;小工具&quot;&gt;&lt;/a&gt;小工具&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/%E5%B0%8F%E5%8E%86-%E5%B0%8F%E8%80%8C%E7%BE%8E%E7%9A%84%E6%97%A5%E5%8E%86/id1031088612?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎小历&lt;/a&gt;：主要在 Widgets 查看日历和法定节假日。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/%E6%8D%B7%E5%BE%84/id915249334?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎捷径&lt;/a&gt;：效率工具，为喜爱的应用创建包括多个步骤的个性化捷径。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/picsew-%E9%95%BF%E6%88%AA%E5%9B%BE%E5%92%8C%E9%95%BF%E5%9B%BE%E6%8B%BC%E6%8E%A5/id1208145167?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎Picsew&lt;/a&gt;：长图拼接工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/%E6%97%B6%E9%97%B4%E5%8D%A1-%E7%B2%BE%E8%87%B4%E7%9A%84%E7%BA%AA%E5%BF%B5%E6%97%A5%E5%8A%A9%E6%89%8B/id1347998487?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‎时间卡&lt;/a&gt;：界面优美的倒计时和累积日工具，记录重要纪念日。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker 部署 MySQL 并实现远程连接</title>
    <link href="http://yoursite.com/2019/01/17/Docker%E9%83%A8%E7%BD%B2MySQL%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/01/17/Docker部署MySQL并实现远程连接/</id>
    <published>2019-01-17T08:20:05.000Z</published>
    <updated>2019-01-17T08:36:10.645Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-部署-MySQL"><a href="#Docker-部署-MySQL" class="headerlink" title="Docker 部署 MySQL"></a>Docker 部署 MySQL</h3><p>下载官方镜像：<br><code>docker pull mysql</code></p><p>列出镜像：<br><code>docker image ls</code></p><p>创建主机存储目录：<br><code>cd &amp;&amp; mkdir mysql-data mysql-conf &amp;&amp; cd mysql-conf</code></p><p>建立 mysql 配置文件，暂时将配置设置为跟容器构建时的配置一致，<code>vi config-file.cnf</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></p><p>启动容器：<br><code>docker run --name mysql --restart=always -v /home/user/mysql-conf:/etc/mysql/conf.d -v /home/user/mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d -P mysql:latest</code></p><p>进入 mysql 容器：<br><code>docker exec -it mysql bash</code></p><p>连接 mysql 数据库：<br><code>mysql -uroot -p</code></p><p>新建 mysql 用户：<br><code>create user &#39;mysql-user&#39;@&#39;%&#39; identified by &#39;mysql-pwd&#39;;</code></p><p>新建数据库：<br><code>create database testbase;</code></p><p>赋用户权限：<br><code>grant all privileges on testbase.* to &#39;mysql-user&#39;@&#39;%&#39;;</code></p><p>立即生效：<br><code>flush privileges;</code></p><a id="more"></a><h3 id="远程客户端连接"><a href="#远程客户端连接" class="headerlink" title="远程客户端连接"></a>远程客户端连接</h3><p>Sequel Pro 客户端连接时报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL said: Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/mysql/lib/plugin/caching_sha2_password.so, 2): image not found</span><br></pre></td></tr></table></figure></p><p>原因是由于密码加密方式 caching_sha2_password 客户端不支持。</p><p>修改 mysql 用户的密码加密方式：<br><code>alter user &#39;mysql-user&#39;@&#39;%&#39; identified with mysql_native_password by &#39;mysql-pwd&#39;;</code></p><p>之后客户端可成功连接。</p><p>参考：<br><a href="https://hub.docker.com/_/mysql?tab=description" target="_blank" rel="noopener">Docker Hub mysql</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker-部署-MySQL&quot;&gt;&lt;a href=&quot;#Docker-部署-MySQL&quot; class=&quot;headerlink&quot; title=&quot;Docker 部署 MySQL&quot;&gt;&lt;/a&gt;Docker 部署 MySQL&lt;/h3&gt;&lt;p&gt;下载官方镜像：&lt;br&gt;&lt;code&gt;docker pull mysql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;列出镜像：&lt;br&gt;&lt;code&gt;docker image ls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建主机存储目录：&lt;br&gt;&lt;code&gt;cd &amp;amp;&amp;amp; mkdir mysql-data mysql-conf &amp;amp;&amp;amp; cd mysql-conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;建立 mysql 配置文件，暂时将配置设置为跟容器构建时的配置一致，&lt;code&gt;vi config-file.cnf&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[mysqld]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;skip-host-cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;skip-name-resolve&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;启动容器：&lt;br&gt;&lt;code&gt;docker run --name mysql --restart=always -v /home/user/mysql-conf:/etc/mysql/conf.d -v /home/user/mysql-data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d -P mysql:latest&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入 mysql 容器：&lt;br&gt;&lt;code&gt;docker exec -it mysql bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;连接 mysql 数据库：&lt;br&gt;&lt;code&gt;mysql -uroot -p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;新建 mysql 用户：&lt;br&gt;&lt;code&gt;create user &amp;#39;mysql-user&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;mysql-pwd&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;新建数据库：&lt;br&gt;&lt;code&gt;create database testbase;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;赋用户权限：&lt;br&gt;&lt;code&gt;grant all privileges on testbase.* to &amp;#39;mysql-user&amp;#39;@&amp;#39;%&amp;#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;立即生效：&lt;br&gt;&lt;code&gt;flush privileges;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>初入 Ubuntu 的一些操作</title>
    <link href="http://yoursite.com/2019/01/16/%E5%88%9D%E5%85%A5Ubuntu%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/01/16/初入Ubuntu的一些操作/</id>
    <published>2019-01-16T10:15:36.000Z</published>
    <updated>2019-01-16T10:21:45.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><p><code>cat /etc/os-release</code></p><h3 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h3><p><code>passwd</code></p><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>新建用户：</p><p><code>adduser username</code></p><p>将新用户加入 sudo 组,这样就可以用 sudo 命令了：</p><p><code>gpasswd sudo -a username</code></p><blockquote><p>若不执行此操作，执行 sudo 命令时，会提示 username is not in the sudoers file.  This incident will be reported.</p></blockquote><h3 id="更改-ssh-默认端口"><a href="#更改-ssh-默认端口" class="headerlink" title="更改 ssh 默认端口"></a>更改 ssh 默认端口</h3><p><code>sudo vi /etc/ssh/sshd_config</code> ，修改 Port 自定义端口号，之后重启 ssh 服务：<code>sudo systemctl restart sshd.service</code> ，根据自己需要看是否禁止 root 用户登录，修改配置文件：<code>PermitRootLogin no</code>，之后重启 ssh 服务。</p><a id="more"></a><h3 id="ssh-免密登陆"><a href="#ssh-免密登陆" class="headerlink" title="ssh 免密登陆"></a>ssh 免密登陆</h3><p>本机生成密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh/vps</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"***@gmail.com"</span> -f ~/.ssh/vps/id_rsa</span><br></pre></td></tr></table></figure><p>config 文件配置，在 ~/.ssh/ 下新建 config 文件， <code>vi config</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># vps configuration</span><br><span class="line">Host vps</span><br><span class="line">HostName ***.***.***.***</span><br><span class="line">Port ***</span><br><span class="line">IdentityFile ~/.ssh/vps/id_rsa</span><br><span class="line">User ***</span><br></pre></td></tr></table></figure><p>本机登陆 vps, 需要输入密码：</p><p><code>ssh vps</code></p><p>创建 .ssh 目录：</p><p><code>cd ~;mkdir .ssh</code></p><p>本机将公钥拷贝至 vps 的用户的 .ssh 目录下, 需要输入密码：</p><p><code>scp id_rsa.pub vps:~/.ssh/authorized_keys</code></p><p>修改 vps 上 authorized_keys 文件权限：</p><p><code>chmod 600 authorized_keys</code></p><p>之后可实现本机免密登陆 vps。</p><h3 id="安装-vim"><a href="#安装-vim" class="headerlink" title="安装 vim"></a>安装 vim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure><h3 id="安装-ftp"><a href="#安装-ftp" class="headerlink" title="安装 ftp"></a>安装 ftp</h3><p><a href="http://wiki.ubuntu.org.cn/Vsftpd" target="_blank" rel="noopener">参考链接</a>  </p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ftp</span><br><span class="line">sudo apt install vsftpd</span><br><span class="line"><span class="comment"># 查看是否打开21端口</span></span><br><span class="line">sudo netstat -npltu | grep 21</span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">ftp localhost</span><br></pre></td></tr></table></figure><p>修改配置文件 /etc/vsftpd.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 设置控制连接的监听端口号，默认为21</span><br><span class="line">listen_port=&lt;port&gt;</span><br><span class="line"># 是否开放本地用户的写权限</span><br><span class="line">write_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"># 限制一切用户登录，只允许列表文件中的用户，用 userlist_file</span><br><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=NO</span><br><span class="line">userlist_file=/etc/vsftpd.user_list</span><br></pre></td></tr></table></figure><p>创建 /etc/vsftpd.user_list，写入只允许登录的用户名。</p><p>启动服务：</p><p><code>sudo service vsftpd start</code></p><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Docker 官方安装教程</a></p><p>设置存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># Add Docker’s official GPG key</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</span></span><br><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><p>安装 DOCKER CE： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># Install the latest version of Docker CE</span></span><br><span class="line">sudo apt install docker-ce</span><br><span class="line"><span class="comment"># Verify that Docker CE is installed correctly by running the hello-world image.</span></span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>启动 Docker CE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> docker </span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>建立 docker 用户组：</p><p>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。</p><p>建立 docker 组：</p><p><code>sudo groupadd docker</code></p><p>将当前用户加入 docker 组：</p><p><code>sudo usermod -aG docker $USER</code></p><h3 id="搭建-shadowsocks"><a href="#搭建-shadowsocks" class="headerlink" title="搭建 shadowsocks"></a>搭建 shadowsocks</h3><p>从 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a> 下载自己建立的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取镜像</span></span><br><span class="line">docker pull zhanglei12345/shadowsocks-libev</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run --restart=always -d -p hostPort:containerPort zhanglei12345/shadowsocks-libev:latest -s 0.0.0.0 -p containerPort -k mypassword -m aes-256-cfb</span><br></pre></td></tr></table></figure><h3 id="搭建-shadowsocksr"><a href="#搭建-shadowsocksr" class="headerlink" title="搭建 shadowsocksr"></a>搭建 shadowsocksr</h3><p>从 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a> 下载自己建立的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取镜像</span></span><br><span class="line">docker pull zhanglei12345/shadowsocksr</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run --restart=always -d -p hostPort:containerPort zhanglei12345/shadowsocksr:latest -p containerPort -k mypassword -m aes-256-cfb -O auth_sha1_v4 -o http_simple</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><p><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">Releases · docker/compose · GitHub</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载对应版本</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 赋执行权限</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 检查版本号</span></span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;查看系统版本&quot;&gt;&lt;a href=&quot;#查看系统版本&quot; class=&quot;headerlink&quot; title=&quot;查看系统版本&quot;&gt;&lt;/a&gt;查看系统版本&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cat /etc/os-release&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;修改-root-密码&quot;&gt;&lt;a href=&quot;#修改-root-密码&quot; class=&quot;headerlink&quot; title=&quot;修改 root 密码&quot;&gt;&lt;/a&gt;修改 root 密码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;passwd&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;新建用户&quot;&gt;&lt;a href=&quot;#新建用户&quot; class=&quot;headerlink&quot; title=&quot;新建用户&quot;&gt;&lt;/a&gt;新建用户&lt;/h3&gt;&lt;p&gt;新建用户：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adduser username&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将新用户加入 sudo 组,这样就可以用 sudo 命令了：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gpasswd sudo -a username&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若不执行此操作，执行 sudo 命令时，会提示 username is not in the sudoers file.  This incident will be reported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;更改-ssh-默认端口&quot;&gt;&lt;a href=&quot;#更改-ssh-默认端口&quot; class=&quot;headerlink&quot; title=&quot;更改 ssh 默认端口&quot;&gt;&lt;/a&gt;更改 ssh 默认端口&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sudo vi /etc/ssh/sshd_config&lt;/code&gt; ，修改 Port 自定义端口号，之后重启 ssh 服务：&lt;code&gt;sudo systemctl restart sshd.service&lt;/code&gt; ，根据自己需要看是否禁止 root 用户登录，修改配置文件：&lt;code&gt;PermitRootLogin no&lt;/code&gt;，之后重启 ssh 服务。&lt;/p&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>入门 Hexo 博客搭建</title>
    <link href="http://yoursite.com/2018/08/23/Hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/08/23/Hexo搭建/</id>
    <published>2018-08-23T13:03:36.000Z</published>
    <updated>2018-11-27T14:42:08.247Z</updated>
    
    <content type="html"><![CDATA[<p>由于个人博客之前一直是搭在 VPS 上的，可看我的另一篇博客 <a href="https://haoleio.com/2017/08/11/VPS%E4%B8%8A%E6%90%AD%E5%BB%BATypecho/" target="_blank" rel="noopener">VPS 上搭建 Typecho</a>，同时自己的 .me 域名到期续费太贵就没继续用了，索性将博客全部迁移至 Github Pages，绑定了新的域名。1 年时间也没水几篇博客，逃！下面记录下自己搭建的流程吧，总的来说挺简单的。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参照 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官网</a>进行安装:</p><pre><code>`npm install -g hexo-cli`</code></pre><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init username.github.io</span><br><span class="line"><span class="built_in">cd</span> username.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>主题自己使用的 <a href="https://github.com/pinggod/hexo-theme-apollo.git" target="_blank" rel="noopener">apollo</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用，后续 git 方式部署需要用到。</p><p><code>npm install hexo-deployer-git --save</code></p><a id="more"></a><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>详细配置及指令请参考<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">官网</a>。</p><p>常用指令：</p><ol><li><p>新建一篇文章</p><p> <code>hexo new &lt;title&gt;</code></p><blockquote><p>等同于在 <strong>source/_posts/</strong> 下新建一个.md文件</p></blockquote></li><li><p>清除缓存文件(db.json)和已生成的静态文件(public)</p><p> <code>hexo clean</code></p></li><li><p>生成静态文件</p><p> <code>hexo g</code></p></li><li><p>启动服务器,可先在本地预览。默认情况下，访问网址为：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p> <code>hexo s</code></p></li><li><p>部署网站</p><p> <code>hexo d</code></p></li></ol><h3 id="添加-disqus-评论"><a href="#添加-disqus-评论" class="headerlink" title="添加 disqus 评论"></a>添加 disqus 评论</h3><p>按照 <a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a> 上给的流程，给自己的站点添加评论。apollo 主题下只需修改主题的 _config.yml 配置文件即可，注意要写 Your website shortname</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>部署之前必须在 github 中创建一个 username.github.io 的仓库。然后修改 _config.yml 配置文件，正确配置 deploy 参数，比如我的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/zhanglei12345/zhanglei12345.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>接下来可以根据主题需要，修改主题自身的配置。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>我在 <a href="https://sg.godaddy.com/" target="_blank" rel="noopener">godaddy</a> 上购买了为期三年的域名，域名解析用的 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a>，进入 DNSPod 中添加自己的域名及对应的服务器，同时要去 godaddy 中将你的 Nameservers 修改成 DNSPod 自家的，等几分钟就好,我的设置：</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fujzpa9r9tj319a0fogo8.jpg" alt></p><p>设置完成后,ping 一下绑定的域名，ip 跟 zhanglei12345.github.io 的 ip 相同，绑定成功。<br>在 zhanglei12345.github.io 目录下，新建一文件 CNAME，写上自己的域名，比如我的就是 haoleio.com，重新构建部署博客。<br>查看 github 上该仓库设置中的 GitHub Pages 参数，可以把域名删掉保存然后再重新填写一遍保存，要不然开启 HTTPS 可能会报错。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fuk063xkikj314u0bygnl.jpg" alt></p><h3 id="博客源文件管理"><a href="#博客源文件管理" class="headerlink" title="博客源文件管理"></a>博客源文件管理</h3><p>由于 hexo-deployer-git 插件在执行部署操作的时候，首先会自动初始化 git 仓库(位置在 .deploy_git 中)，并关联到指定 repo 与 branch，后续 public 文件夹中自动生成的页面代码将会拷贝至此目录中进行代码管理。GitHub Page 会根据 master 分支的内容来生成页面，并且 master 分支的内容也只包含 public 文件夹里自动生成的文件。可以新建一个分支来管理写博客的源文件。</p><p>新建 hexo 分支：</p><pre><code>`git branch hexo`</code></pre><p>可结合 hexo 的部署查看一下 .gitignore，之后 git 提交自己的博客源文件，由于自己提交的通常基本都是 hexo 分支，可进入 github 将该仓库的 hexo 分支设置为默认分支。<br>(注意主题都是 git clone 过来的，可以通过删除主题下的 .git 目录来提交自己的修改)</p><h3 id="在另外一台设备上管理博客"><a href="#在另外一台设备上管理博客" class="headerlink" title="在另外一台设备上管理博客"></a>在另外一台设备上管理博客</h3><p>在家和公司有时都会更新博客，这时候就需要在两台设备均可管理博客了。在家可能自己会用 chromebook 上安装的 Ubuntu 进行管理，如何安装可以看我的另一篇博客 <a href="https://haoleio.com/2018/08/19/%E5%85%A5%E6%89%8B%E6%8A%98%E8%85%BESamsungChromebookPro/" target="_blank" rel="noopener">入手折腾 Samsung Chromebook Pro</a> 。</p><p>参照 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官网</a> 在 Ubuntu 上进行安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 git</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 nvm 来安装 Node.js </span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 git 部署</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>配置好自己的 git 后，进入 zhanglei12345.github.io 目录，执行 <code>npm install</code>，这里需要注意，千万不要用 <code>hexo init</code> 命令,因为当前目录已经建立了 git 仓库环境, <code>hexo init</code> 会覆盖到当前的 git 环境，重建一个新的，这样和源码仓库就脱离了联系。</p><p>之后就能正常编写和部署了,记得每次操作之前 <code>git pull</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于个人博客之前一直是搭在 VPS 上的，可看我的另一篇博客 &lt;a href=&quot;https://haoleio.com/2017/08/11/VPS%E4%B8%8A%E6%90%AD%E5%BB%BATypecho/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VPS 上搭建 Typecho&lt;/a&gt;，同时自己的 .me 域名到期续费太贵就没继续用了，索性将博客全部迁移至 Github Pages，绑定了新的域名。1 年时间也没水几篇博客，逃！下面记录下自己搭建的流程吧，总的来说挺简单的。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;参照 &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo 官网&lt;/a&gt;进行安装:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`npm install -g hexo-cli`
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;建站&quot;&gt;&lt;a href=&quot;#建站&quot; class=&quot;headerlink&quot; title=&quot;建站&quot;&gt;&lt;/a&gt;建站&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init username.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; username.github.io&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主题自己使用的 &lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;apollo&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/pinggod/hexo-theme-apollo.git themes/apollo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Hexo 3.0 把服务器独立成了个别模块，您必须先安装 hexo-server 才能使用，后续 git 方式部署需要用到。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BLOG" scheme="http://yoursite.com/categories/BLOG/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>入手折腾 Samsung Chromebook Pro</title>
    <link href="http://yoursite.com/2018/08/19/%E5%85%A5%E6%89%8B%E6%8A%98%E8%85%BESamsungChromebookPro/"/>
    <id>http://yoursite.com/2018/08/19/入手折腾SamsungChromebookPro/</id>
    <published>2018-08-19T13:44:36.000Z</published>
    <updated>2018-11-21T14:45:55.600Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间被 Chromebook 吸引，入手了一款 Samsung Chromebook Pro,具体配置可自行 google，下面对折腾记录一下。</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>Chromebook 开机登录需要 google 帐号，自己通过在树莓派上搭建的可自由上网的路由器搞定，登录入系统后可通过 play store 下载 shadowsocks，挂代理后就不需要一直连接树莓派了(由于目前只搭建了全局，还没做优化)，连接上任一 wifi 即可。</p><h2 id="进入开发者模式"><a href="#进入开发者模式" class="headerlink" title="进入开发者模式"></a>进入开发者模式</h2><p>按住 Esc 键和刷新(F3)按键，然后按住 Power 按钮，调用 Recovery 模式。<br>出现 Recovery 屏幕后，按 Ctrl + D。该操作没有提示，因此只需完成即可。此后，系统会提示确认并重新启动以进入开发者模式。</p><p><strong>注：进入开发者模式会清空用户数据，注意备份</strong>。要跳过 OS 加载屏幕，请等待30秒，或者按 Ctrl + D，Chromebook 将继续启动。</p><p>进入开发者模式后，就可以自己下载 APK 文件进行应用安装了。</p><h2 id="利用-crouton-安装-Ubuntu"><a href="#利用-crouton-安装-Ubuntu" class="headerlink" title="利用 crouton 安装 Ubuntu"></a>利用 crouton 安装 Ubuntu</h2><p>进入开发者模式后，还可以基于 crouton 安装 Ubuntu，操作如下：</p><ol><li>从 <a href="https://goo.gl/fd3zc" target="_blank" rel="noopener">https://goo.gl/fd3zc</a> 下载最新的 crouton 版本，放到 ~/Download 目录下</li><li>打开 Chrome，键入 Ctrl + Alt + T，进入 shell 界面，输入 shell 并回车</li><li>执行： sudo sh ~/Downloads/crouton -t xfce ，也可以安装其他桌面(该过程需要连接树莓派的网络，否则会出现某个源下载不了导致失败)</li><li>安装完成之后即可进入桌面：sudo enter-chroot 进入终端，sudo startxfce4 进入图形界面</li><li>在 Chrome os 和 Ubuntu 之间进行切换：从 C 到 U，shift + ctrl + alt + 前进键，从 U 到<br>C，shift + ctrl + alt + 后退键</li><li>之后就可以畅快的玩耍 Chrome os 和 Ubuntu了。</li></ol><a id="more"></a><h2 id="xiwi-窗口化"><a href="#xiwi-窗口化" class="headerlink" title="xiwi 窗口化"></a>xiwi 窗口化</h2><p>在两个系统之间切换很麻烦，所以可以使用 xiwi 来实现窗口化：</p><ol><li>给 Chrome 安装 crouton 扩展：<a href="https://goo.gl/OVQOEt" target="_blank" rel="noopener">https://goo.gl/OVQOEt</a></li><li>安装 xiwi：sudo sh ~/Downloads/crouton -u -t xiwi</li></ol><h2 id="安装-vscode"><a href="#安装-vscode" class="headerlink" title="安装 vscode"></a>安装 vscode</h2><p>在 Chrome os 中下载 vscode 的 ubuntu 版本，默认放在 Downloads 目录下，在 Ubuntu 终端界面进行安装：</p><ol><li>sudo dpkg -i code*.deb  //下载的 vscode 的对应版本</li><li>sudo apt-get install -f   //安装依赖</li></ol><p>安装成功之后，可以通过 xiwi -T code -f . 使 vscode 窗口化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间被 Chromebook 吸引，入手了一款 Samsung Chromebook Pro,具体配置可自行 google，下面对折腾记录一下。&lt;/p&gt;
&lt;h2 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h2&gt;&lt;p&gt;Chromebook 开机登录需要 google 帐号，自己通过在树莓派上搭建的可自由上网的路由器搞定，登录入系统后可通过 play store 下载 shadowsocks，挂代理后就不需要一直连接树莓派了(由于目前只搭建了全局，还没做优化)，连接上任一 wifi 即可。&lt;/p&gt;
&lt;h2 id=&quot;进入开发者模式&quot;&gt;&lt;a href=&quot;#进入开发者模式&quot; class=&quot;headerlink&quot; title=&quot;进入开发者模式&quot;&gt;&lt;/a&gt;进入开发者模式&lt;/h2&gt;&lt;p&gt;按住 Esc 键和刷新(F3)按键，然后按住 Power 按钮，调用 Recovery 模式。&lt;br&gt;出现 Recovery 屏幕后，按 Ctrl + D。该操作没有提示，因此只需完成即可。此后，系统会提示确认并重新启动以进入开发者模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：进入开发者模式会清空用户数据，注意备份&lt;/strong&gt;。要跳过 OS 加载屏幕，请等待30秒，或者按 Ctrl + D，Chromebook 将继续启动。&lt;/p&gt;
&lt;p&gt;进入开发者模式后，就可以自己下载 APK 文件进行应用安装了。&lt;/p&gt;
&lt;h2 id=&quot;利用-crouton-安装-Ubuntu&quot;&gt;&lt;a href=&quot;#利用-crouton-安装-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;利用 crouton 安装 Ubuntu&quot;&gt;&lt;/a&gt;利用 crouton 安装 Ubuntu&lt;/h2&gt;&lt;p&gt;进入开发者模式后，还可以基于 crouton 安装 Ubuntu，操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 &lt;a href=&quot;https://goo.gl/fd3zc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://goo.gl/fd3zc&lt;/a&gt; 下载最新的 crouton 版本，放到 ~/Download 目录下&lt;/li&gt;
&lt;li&gt;打开 Chrome，键入 Ctrl + Alt + T，进入 shell 界面，输入 shell 并回车&lt;/li&gt;
&lt;li&gt;执行： sudo sh ~/Downloads/crouton -t xfce ，也可以安装其他桌面(该过程需要连接树莓派的网络，否则会出现某个源下载不了导致失败)&lt;/li&gt;
&lt;li&gt;安装完成之后即可进入桌面：sudo enter-chroot 进入终端，sudo startxfce4 进入图形界面&lt;/li&gt;
&lt;li&gt;在 Chrome os 和 Ubuntu 之间进行切换：从 C 到 U，shift + ctrl + alt + 前进键，从 U 到&lt;br&gt;C，shift + ctrl + alt + 后退键&lt;/li&gt;
&lt;li&gt;之后就可以畅快的玩耍 Chrome os 和 Ubuntu了。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Chromebook" scheme="http://yoursite.com/tags/Chromebook/"/>
    
  </entry>
  
  <entry>
    <title>在 Telegram 收发微信消息</title>
    <link href="http://yoursite.com/2018/08/17/%E5%9C%A8Telegram%E6%94%B6%E5%8F%91%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF/"/>
    <id>http://yoursite.com/2018/08/17/在Telegram收发微信消息/</id>
    <published>2018-08-17T13:44:36.000Z</published>
    <updated>2018-11-21T14:48:48.878Z</updated>
    
    <content type="html"><![CDATA[<p>开发代号 <a href="https://github.com/blueset/ehForwarderBot" target="_blank" rel="noopener">EH Forwarder Bot</a>（简称 EFB）是一个可扩展的聊天平台隧道框架，基于 Python 3。目前已内置了 Telegram 主端 (Master Channel) 和微信从端 (Slave Channel)，用来在 Telegram 收发微信消息。</p><p>本文介绍了如何在 VPS(Ubuntu 16.04) 中安装并配置 EFB、Telegram 主端和微信从端，以及如何使用 Telegram 主端来收发微信消息。自己用了将近一个月了，体验很棒，尤其是丰富便捷的表情包，可以悄悄告诉你这种方式自带消息防撤回功能，不过需要注意的是这种登录方式是基于网页微信版本的，功能受限制，登录mac版本的微信后也会把其顶掉。</p><h2 id="安装-EFB"><a href="#安装-EFB" class="headerlink" title="安装 EFB"></a>安装 EFB</h2><p>远程登录 VPS，找到合适目录执行以下步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blueset/ehForwarderBot.git</span><br><span class="line"><span class="built_in">cd</span> ehForwarderBot</span><br><span class="line">mkdir storage</span><br><span class="line">chmod +rw ./storage</span><br></pre></td></tr></table></figure><p>安装依赖:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-dev python3-setuptools</span><br><span class="line">sudo apt-get install libwebp-dev</span><br><span class="line">sudo apt-get install libmagic-dev ffmpeg</span><br></pre></td></tr></table></figure><p>安装 python 依赖:</p><p><code>pip3 install -r requirements.txt</code></p><a id="more"></a><h2 id="创建-Telegram-Bot"><a href="#创建-Telegram-Bot" class="headerlink" title="创建 Telegram Bot"></a>创建 Telegram Bot</h2><p>要创建一个新的 Bot，要先向 @BotFather 发起会话。发送指令 /newbot 以启动向导。期间，你需要指定这个 Bot 的名称与用户名（用户名必须以 bot 结尾）。完毕之后 @BotFather 会提供给你一个密钥（Token）。</p><p>接下来还要对刚刚启用的 Bot 进行进一步的配置：允许 Bot 读取非指令信息、允许将 Bot 添加进群组、以及提供指令列表。</p><ul><li>发送 /setprivacy 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Disable”。</li><li>发送 /setjoingroups 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Enable”。</li><li>发送 /setcommands 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后发送如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">link - 将会话绑定到 Telegram 群组</span><br><span class="line">chat - 生成会话头</span><br><span class="line">recog - 回复语音消息以进行识别</span><br><span class="line">extra - 获取更多功能</span><br></pre></td></tr></table></figure><p>通过bot获取你自己的 Telegram ID：</p><p><code>@get_id_bot 发送 /start</code></p><h2 id="配置-EFB"><a href="#配置-EFB" class="headerlink" title="配置 EFB"></a>配置 EFB</h2><p>复制并编辑配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp config.sample.py config.py</span><br><span class="line">vi config.py</span><br></pre></td></tr></table></figure><p>在配置文件中，token 后引号里面的内容替换为你之前获得的 Bot 密钥，admins 后方括号里面填入你自己的 Telegram ID。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">master_channel = <span class="string">'plugins.eh_telegram_master'</span>, <span class="string">'TelegramChannel'</span></span><br><span class="line">slave_channels = [(<span class="string">'plugins.eh_wechat_slave'</span>, <span class="string">'WeChatChannel'</span>)]</span><br><span class="line"></span><br><span class="line">eh_telegram_master = &#123;</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"***:***"</span>,</span><br><span class="line">    <span class="string">"admins"</span>: [***]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-EFB"><a href="#启动-EFB" class="headerlink" title="启动 EFB"></a>启动 EFB</h2><p><code>python3 daemon.py start</code></p><p>之后可看见二维码，用微信扫描登录即可。</p><h2 id="使用-EFB-Telegram-主端"><a href="#使用-EFB-Telegram-主端" class="headerlink" title="使用 EFB Telegram 主端"></a>使用 EFB Telegram 主端</h2><p>现在，在 Telegram 里面搜索你之前指定的 Bot 用户名，点击 Start（开始）即可开始与微信互通消息了。</p><p>在最初，所有来自微信的消息都会通过 Bot 直接发送给你，要回复其中的任意一条消息，你需要在 Telegram 中选中那条消息，选择 Reply（回复），再输入消息内容。</p><p>如果需要向新联系人发送消息，只需发送 /chat 指令，选择一个会话。之后这条消息就会变成一个「会话头」，回复这条消息就可以向指定的联系人或群组发送消息。</p><p>当消息过多时，来自不同会话的消息会使 Telegram 上面的会话混乱不堪。EFB 支持将来自指定会话的消息分流到一个 Telegram 群组中。</p><ul><li>在 Telegram 中新建一个空群组，并将你的 Bot 加入到这个群组中。</li><li>回到 Bot 会话，发送 /link，选择一个会话，并点击 “Link”。</li><li>在弹出的列表中选择刚刚创建的空群组即可。</li></ul><p>利用这种方式可以实现等同于微信里面的一对一对话。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发代号 &lt;a href=&quot;https://github.com/blueset/ehForwarderBot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EH Forwarder Bot&lt;/a&gt;（简称 EFB）是一个可扩展的聊天平台隧道框架，基于 Python 3。目前已内置了 Telegram 主端 (Master Channel) 和微信从端 (Slave Channel)，用来在 Telegram 收发微信消息。&lt;/p&gt;
&lt;p&gt;本文介绍了如何在 VPS(Ubuntu 16.04) 中安装并配置 EFB、Telegram 主端和微信从端，以及如何使用 Telegram 主端来收发微信消息。自己用了将近一个月了，体验很棒，尤其是丰富便捷的表情包，可以悄悄告诉你这种方式自带消息防撤回功能，不过需要注意的是这种登录方式是基于网页微信版本的，功能受限制，登录mac版本的微信后也会把其顶掉。&lt;/p&gt;
&lt;h2 id=&quot;安装-EFB&quot;&gt;&lt;a href=&quot;#安装-EFB&quot; class=&quot;headerlink&quot; title=&quot;安装 EFB&quot;&gt;&lt;/a&gt;安装 EFB&lt;/h2&gt;&lt;p&gt;远程登录 VPS，找到合适目录执行以下步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/blueset/ehForwarderBot.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ehForwarderBot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir storage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +rw ./storage&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装依赖:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python3-dev python3-setuptools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libwebp-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libmagic-dev ffmpeg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装 python 依赖:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip3 install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="Telegram" scheme="http://yoursite.com/tags/Telegram/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Telegram Bot 初体验</title>
    <link href="http://yoursite.com/2018/08/16/TelegramBot%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/08/16/TelegramBot初体验/</id>
    <published>2018-08-16T13:44:36.000Z</published>
    <updated>2018-11-21T14:42:57.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Telegram 是一个专注于速度和安全性的 IM 应用，它超级快速，简单和免费。<br>您可以同时在您所有的设备上使用 Telegram - 您的消息可以在任意数量的手机，平板电脑或计算机之间无缝同步。</p></blockquote><p>这篇文章主要介绍如何开发一个简单 telegram 机器人，我的机器人@happy_mybot。</p><h2 id="创建-Telegram-Bot"><a href="#创建-Telegram-Bot" class="headerlink" title="创建 Telegram Bot"></a>创建 Telegram Bot</h2><p><a href="https://core.telegram.org/bots" target="_blank" rel="noopener">bots</a> 这是官网对 bot 的介绍。</p><p>要创建一个新的 Bot，要先向 @BotFather 发起会话。发送指令 /newbot 以启动向导。期间，你需要指定这个 Bot 的名称与用户名（用户名必须以 bot 结尾）。完毕之后 @BotFather 会提供给你一个密钥（Token）。</p><p>接下来还要对刚刚启用的 Bot 进行进一步的配置：允许 Bot 读取非指令信息、允许将 Bot 添加进群组、以及提供指令列表。</p><p>发送 /setprivacy 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Disable”。</p><p>发送 /setjoingroups 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Enable”。</p><p>发送 /setcommands 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后发送如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start - say hello</span><br><span class="line">songci- Get songci</span><br><span class="line">tangshi - Get tangshi</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用-python-telegram-bot-库"><a href="#使用-python-telegram-bot-库" class="headerlink" title="使用 python-telegram-bot 库"></a>使用 python-telegram-bot 库</h2><p>github 上 <a href="https://github.com/python-telegram-bot/python-telegram-bot" target="_blank" rel="noopener">python-telegram-bot</a> 库是对官方 bot api 的一个封装，使开发更加地快速。跟着该库的介绍进行安装。</p><p>telegram支持两种获取消息的方式，Polling 和 <a href="https://github.com/python-telegram-bot/python-telegram-bot/wiki/Webhooks" target="_blank" rel="noopener">Webhook</a>。我使用的简单点的 Polling。</p><blockquote><p>You should have a good reason to switch from polling to a webhook. Don’t do it simply because it sounds cool.</p></blockquote><p>具体代码可看我托管在github上的<a href="https://github.com/zhanglei12345/happybot" target="_blank" rel="noopener">happybot</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Telegram 是一个专注于速度和安全性的 IM 应用，它超级快速，简单和免费。&lt;br&gt;您可以同时在您所有的设备上使用 Telegram - 您的消息可以在任意数量的手机，平板电脑或计算机之间无缝同步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章主要介绍如何开发一个简单 telegram 机器人，我的机器人@happy_mybot。&lt;/p&gt;
&lt;h2 id=&quot;创建-Telegram-Bot&quot;&gt;&lt;a href=&quot;#创建-Telegram-Bot&quot; class=&quot;headerlink&quot; title=&quot;创建 Telegram Bot&quot;&gt;&lt;/a&gt;创建 Telegram Bot&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://core.telegram.org/bots&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bots&lt;/a&gt; 这是官网对 bot 的介绍。&lt;/p&gt;
&lt;p&gt;要创建一个新的 Bot，要先向 @BotFather 发起会话。发送指令 /newbot 以启动向导。期间，你需要指定这个 Bot 的名称与用户名（用户名必须以 bot 结尾）。完毕之后 @BotFather 会提供给你一个密钥（Token）。&lt;/p&gt;
&lt;p&gt;接下来还要对刚刚启用的 Bot 进行进一步的配置：允许 Bot 读取非指令信息、允许将 Bot 添加进群组、以及提供指令列表。&lt;/p&gt;
&lt;p&gt;发送 /setprivacy 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Disable”。&lt;/p&gt;
&lt;p&gt;发送 /setjoingroups 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Enable”。&lt;/p&gt;
&lt;p&gt;发送 /setcommands 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后发送如下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;start - say hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;songci	- Get songci&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tangshi - Get tangshi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="Telegram" scheme="http://yoursite.com/tags/Telegram/"/>
    
  </entry>
  
  <entry>
    <title>树莓派控制 LED 灯</title>
    <link href="http://yoursite.com/2018/08/15/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A7%E5%88%B6LED%E7%81%AF/"/>
    <id>http://yoursite.com/2018/08/15/树莓派控制LED灯/</id>
    <published>2018-08-15T13:44:36.000Z</published>
    <updated>2018-11-21T14:52:25.126Z</updated>
    
    <content type="html"><![CDATA[<p>通过树莓派实现 5个 led 灯的循环亮灯，目前设置的亮灯间隔为 0.5s，亮灯循环 10次。</p><h2 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h2><p>200Ω 的电阻 5个、发光二极管 LED 5个、面包板、杜邦线</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjlt2uriifj30dx06rmxi.jpg" alt></p><p>当我们使用 GPIO 引脚作为输出时，Raspberry Pi 将替换上图中的开关和电池。每个引脚可以打开或关闭，或者在计算方面变为 HIGH 或 LOW。当引脚为高电平时，它输出 3.3 伏（3v3）; 当引脚为低电平时，它是关闭的。</p><a id="more"></a><h2 id="接线方式"><a href="#接线方式" class="headerlink" title="接线方式"></a>接线方式</h2><p>树莓派Ground引脚接面包板的 -。</p><p>LED正极(长脚)接树莓派的 GPIO 引脚，负极接电阻再接 -。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjlt39xn7jj31kw1q24or.jpg" alt></p><h2 id="控制程序-Python"><a href="#控制程序-Python" class="headerlink" title="控制程序(Python)"></a>控制程序(Python)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">channels = [<span class="number">13</span>,<span class="number">21</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">26</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_GPIO</span><span class="params">()</span>:</span></span><br><span class="line">    GPIO.setmode(GPIO.BCM)</span><br><span class="line">    GPIO.setwarnings(<span class="keyword">False</span>)</span><br><span class="line">    GPIO.setup(channels, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_led</span><span class="params">(i)</span>:</span></span><br><span class="line">    GPIO.output(i, GPIO.HIGH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off_led</span><span class="params">(i)</span>:</span></span><br><span class="line">    GPIO.output(i, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">control_led</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> channels:</span><br><span class="line">                on_led(i)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                off_led(i)</span><br><span class="line">        <span class="keyword">except</span> (KeyboardInterrupt,Exception):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    setup_GPIO()</span><br><span class="line">    control_led()</span><br><span class="line">    <span class="comment"># Ctrl + C 终止一次之后，发现下次程序再运行的时候，上次终止时的那个LED灯也是亮的，所以在终止之后加了全部设置为LOW</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> channels:</span><br><span class="line">        off_led(i)</span><br><span class="line">    GPIO.cleanup()</span><br></pre></td></tr></table></figure><h3 id="RPi-GPIO-Installation"><a href="#RPi-GPIO-Installation" class="headerlink" title="RPi.GPIO Installation"></a>RPi.GPIO Installation</h3><p><a href="https://pypi.python.org/pypi/RPi.GPIO" target="_blank" rel="noopener">官网</a></p><p>The RPi.GPIO module is installed by default in Raspbian. To make sure that it is at the latest version:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install python-rpi.gpio python3-rpi.gpio</span><br></pre></td></tr></table></figure><p>It is recommended that you install RPi.GPIO using the pip utility as superuser (root):</p><p><code>sudo pip install RPi.GPIO</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>导入:</p><p><code>import RPi.GPIO as GPIO</code></p><p>编写 IO 引脚的方式</p><p>设置:</p><p><code>GPIO.setmode(GPIO.BOARD)</code> 或 <code>GPIO.setmode(GPIO.BCM)</code></p><blockquote><p>BCM 方式是按照 GPIO 引脚编号，BOARD 方式是按照物理编号</p></blockquote><p>获取:</p><p><code>mode = GPIO.getmode()</code></p><blockquote><p>The mode will be GPIO.BOARD, GPIO.BCM or None</p></blockquote><p>警告:</p><p>GPIO 可能有多个脚本/电路，如果 RPi.GPIO 检测到引脚已配置为默认值（输入）以外的其他值，则在尝试配置脚本时会发出警告。要禁用这些警告：</p><p><code>GPIO.setwarnings(False)</code></p><p>设置一个 channel：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input</span></span><br><span class="line">GPIO.setup(channel, GPIO.IN)</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">GPIO.setup(channel, GPIO.OUT)</span><br><span class="line"><span class="comment"># initial</span></span><br><span class="line">GPIO.setup(channel, GPIO.OUT, initial=GPIO.HIGH)</span><br><span class="line"><span class="comment">#release 0.5.8 onwards</span></span><br><span class="line">chan_list = [<span class="number">11</span>,<span class="number">12</span>] <span class="comment">#   chan_list = (11,12)</span></span><br><span class="line">GPIO.setup(chan_list, GPIO.OUT)</span><br></pre></td></tr></table></figure><p>读取引脚的值：</p><p><code>GPIO.input(channel)</code></p><blockquote><p>This will return either 0 / GPIO.LOW / False or 1 / GPIO.HIGH / True.</p></blockquote><p>设置引脚输出的的状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GPIO.output(channel, state)</span><br><span class="line"><span class="comment">#release 0.5.8 onwards</span></span><br><span class="line">chan_list = [<span class="number">11</span>,<span class="number">12</span>] </span><br><span class="line">GPIO.output(chan_list, GPIO.LOW)</span><br><span class="line">GPIO.output(chan_list, (GPIO.HIGH, GPIO.LOW))</span><br></pre></td></tr></table></figure><blockquote><p>State can be 0 / GPIO.LOW / False or 1 / GPIO.HIGH / True.</p></blockquote><p>在脚本结束的时候做清理：</p><p><code>GPIO.cleanup()</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过树莓派实现 5个 led 灯的循环亮灯，目前设置的亮灯间隔为 0.5s，亮灯循环 10次。&lt;/p&gt;
&lt;h2 id=&quot;配件&quot;&gt;&lt;a href=&quot;#配件&quot; class=&quot;headerlink&quot; title=&quot;配件&quot;&gt;&lt;/a&gt;配件&lt;/h2&gt;&lt;p&gt;200Ω 的电阻 5个、发光二极管 LED 5个、面包板、杜邦线&lt;/p&gt;
&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fjlt2uriifj30dx06rmxi.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;当我们使用 GPIO 引脚作为输出时，Raspberry Pi 将替换上图中的开关和电池。每个引脚可以打开或关闭，或者在计算方面变为 HIGH 或 LOW。当引脚为高电平时，它输出 3.3 伏（3v3）; 当引脚为低电平时，它是关闭的。&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://yoursite.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="LED" scheme="http://yoursite.com/tags/LED/"/>
    
  </entry>
  
  <entry>
    <title>利用三极管控制树莓派风扇</title>
    <link href="http://yoursite.com/2018/08/14/%E5%88%A9%E7%94%A8%E4%B8%89%E6%9E%81%E7%AE%A1%E6%8E%A7%E5%88%B6%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A3%8E%E6%89%87/"/>
    <id>http://yoursite.com/2018/08/14/利用三极管控制树莓派风扇/</id>
    <published>2018-08-14T13:44:36.000Z</published>
    <updated>2018-11-21T14:54:43.189Z</updated>
    
    <content type="html"><![CDATA[<p>由于只要树莓派通电，散热风扇就会不停的转动，不管树莓派是开机还是关机，而且风扇转动的声音很大。因此，通过监控 CPU 的温度去控制风扇的开关是很有必要的。</p><h2 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h2><p>三极管(S8050)、杜邦线、面包板</p><h2 id="引脚介绍"><a href="#引脚介绍" class="headerlink" title="引脚介绍"></a>引脚介绍</h2><p><a href="https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/README.md" target="_blank" rel="noopener">树莓派引脚</a></p><p>the numbering of the GPIO：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fjlu80fjfij30e7045gmk.jpg" alt></p><p>physical numbering：</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fjlu8c4ilsj30dy03zmy9.jpg" alt></p><a id="more"></a><p>三极管(S8050)：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjlu8yrogcj3075081aar.jpg" alt></p><blockquote><p>集电极接电源正极，发射极接电源负极。</p></blockquote><p>面包板：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjlua67zu3j309g0avq40.jpg" alt></p><blockquote><p>+极和-极是两根垂直的导线，标着 50、55、60 这些数字的行，每一行都是一根水平的导线。导线与导线之间互不连接，另外，面包板的左右两半也是互不连接的。面包板相当于导线的作用。</p></blockquote><h2 id="接线方式"><a href="#接线方式" class="headerlink" title="接线方式"></a>接线方式</h2><p>树莓派 5V 引脚接面包板，同时将风扇红线 接到该导线上；</p><p>树莓派 Ground 引脚接到面包板，同时将三极管的E极接到该导线上；</p><p>风扇黑线接三极管 C极；</p><p>树莓派 GPIO 引脚接到三极管 B极。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjlubgd9brj31kw16oe81.jpg" alt></p><h2 id="控制程序-Python"><a href="#控制程序-Python" class="headerlink" title="控制程序(Python)"></a>控制程序(Python)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time, datetime</span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line">GPIO_OUT = <span class="number">18</span></span><br><span class="line">LOG_PATH = <span class="string">'/var/log/fan_control.log'</span></span><br><span class="line">IS_DEBUG=<span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_cpu_temperature</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">"/sys/class/thermal/thermal_zone0/temp"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    temperature = float(f.read()) / <span class="number">1000</span></span><br><span class="line">  log(<span class="string">'DEBUG'</span>, <span class="string">'Current CPU temperature is %s'</span> % temperature)</span><br><span class="line">  <span class="keyword">return</span> temperature</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_fan</span><span class="params">()</span>:</span></span><br><span class="line">  log(<span class="string">'INFO'</span>, <span class="string">'power on.'</span>)</span><br><span class="line">  GPIO.output(GPIO_OUT, GPIO.HIGH)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop_fan</span><span class="params">()</span>:</span></span><br><span class="line">  log(<span class="string">'INFO'</span>, <span class="string">'power off.'</span>)</span><br><span class="line">  GPIO.output(GPIO_OUT, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_GPIO</span><span class="params">()</span>:</span></span><br><span class="line">  GPIO.setmode(GPIO.BCM)</span><br><span class="line">  GPIO.setwarnings(<span class="keyword">False</span>)</span><br><span class="line">  GPIO.setup(GPIO_OUT, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">control_fan</span><span class="params">()</span>:</span></span><br><span class="line">  is_close = <span class="keyword">True</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      temp = read_cpu_temperature()</span><br><span class="line">      <span class="keyword">if</span> is_close:</span><br><span class="line">        <span class="keyword">if</span> temp&gt;=<span class="number">53</span>:</span><br><span class="line">          start_fan()</span><br><span class="line">          is_close = <span class="keyword">False</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> temp&lt;=<span class="number">43</span>:</span><br><span class="line">          stop_fan()</span><br><span class="line">          is_close = <span class="keyword">True</span></span><br><span class="line">      time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt,Exception) <span class="keyword">as</span> e:</span><br><span class="line">      log(<span class="string">'WARN'</span>, e)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(level, msg)</span>:</span></span><br><span class="line">  log_msg = <span class="string">'[%s]: %s (%s)'</span> % (level, msg, datetime.datetime.now() )</span><br><span class="line">  <span class="keyword">if</span> IS_DEBUG:</span><br><span class="line">    <span class="keyword">print</span> log_msg</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> level == <span class="string">'DEBUG'</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(LOG_PATH, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(log_msg+<span class="string">'\n'</span>)</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Unable to log, %s"</span> % e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  log(<span class="string">'INFO'</span>, <span class="string">'started.'</span>)</span><br><span class="line">  setup_GPIO()</span><br><span class="line">  control_fan()</span><br><span class="line">  GPIO.cleanup()</span><br><span class="line">  log(<span class="string">'INFO'</span>, <span class="string">'quit.'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于只要树莓派通电，散热风扇就会不停的转动，不管树莓派是开机还是关机，而且风扇转动的声音很大。因此，通过监控 CPU 的温度去控制风扇的开关是很有必要的。&lt;/p&gt;
&lt;h2 id=&quot;配件&quot;&gt;&lt;a href=&quot;#配件&quot; class=&quot;headerlink&quot; title=&quot;配件&quot;&gt;&lt;/a&gt;配件&lt;/h2&gt;&lt;p&gt;三极管(S8050)、杜邦线、面包板&lt;/p&gt;
&lt;h2 id=&quot;引脚介绍&quot;&gt;&lt;a href=&quot;#引脚介绍&quot; class=&quot;headerlink&quot; title=&quot;引脚介绍&quot;&gt;&lt;/a&gt;引脚介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/usage/gpio-plus-and-raspi2/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;树莓派引脚&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;the numbering of the GPIO：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1fjlu80fjfij30e7045gmk.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;physical numbering：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1fjlu8c4ilsj30dy03zmy9.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://yoursite.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="三极管" scheme="http://yoursite.com/tags/%E4%B8%89%E6%9E%81%E7%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>利用 raspberrypi 搭建下载机</title>
    <link href="http://yoursite.com/2018/08/13/%E5%88%A9%E7%94%A8raspberrypi%E6%90%AD%E5%BB%BA%E4%B8%8B%E8%BD%BD%E6%9C%BA/"/>
    <id>http://yoursite.com/2018/08/13/利用raspberrypi搭建下载机/</id>
    <published>2018-08-13T13:44:36.000Z</published>
    <updated>2018-11-21T15:00:52.954Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章介绍利用 raspberrypi 搭建下载机。</p><h2 id="aria2"><a href="#aria2" class="headerlink" title="aria2"></a>aria2</h2><p><a href="https://aria2.github.io/manual/en/html/aria2c.html?highlight=session#" target="_blank" rel="noopener">aria2</a> is a utility for downloading files.</p><p>安装 aria2：</p><p><code>sudo apt-get install aria2</code></p><p>aria2 运行的时候需要两个文件，并且需要我们手动配置，一个是配置文件 <strong>aria2.conf</strong>，保存配置，另一个是 <strong>aria2.session</strong>，要不每次 aria2 关闭的时候，之前下载的进度都没了。</p><a id="more"></a><p>生成 token (外网连接加上验证)：</p><p><a href="https://pyjwt.readthedocs.io/en/latest/" target="_blank" rel="noopener">PyJWT</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install pyjwt</span><br><span class="line">python</span><br><span class="line">&gt;&gt;&gt; import jwt</span><br><span class="line">&gt;&gt;&gt; jwt.encode(&#123;<span class="string">'some'</span>: <span class="string">'payload'</span>&#125;, <span class="string">'secret'</span>, algorithm=<span class="string">'HS256'</span>, headers=&#123;<span class="string">'name'</span> : <span class="string">'zhanglei'</span>&#125;)</span><br></pre></td></tr></table></figure><p>会生成一个 token，将添加于 aria2.conf 中。</p><p>创建 aria2.conf 和 aria2.session：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line">mkdir .aria2</span><br><span class="line"><span class="built_in">cd</span> .aria2   </span><br><span class="line">touch aria2.session  </span><br><span class="line">vim aria2.conf</span><br></pre></td></tr></table></figure><p>aria2.conf 中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#文件保存目录 </span><br><span class="line">dir=/home/pi/Downloads</span><br><span class="line">#禁用IPv6, 默认:false</span><br><span class="line">disable-ipv6=true  </span><br><span class="line">#启用RPC, 默认:false</span><br><span class="line">enable-rpc=true  </span><br><span class="line">#允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all=true  </span><br><span class="line">#允许外部访问, 默认:false，false的话只监听本地端口</span><br><span class="line">rpc-listen-all=true  </span><br><span class="line">#设置的RPC授权令牌,上面生成的 token</span><br><span class="line">rpc-secret= token</span><br><span class="line">#RPC监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">#rpc-listen-port=6800  </span><br><span class="line">#允许断点续传</span><br><span class="line">continue=true  </span><br><span class="line">#从会话文件中读取下载任务</span><br><span class="line">input-file=/home/pi/.aria2/aria2.session </span><br><span class="line">#在aria2退出时保存‘错误/未完成’的下载任务到会话文件</span><br><span class="line">save-session=/home/pi/.aria2/aria2.session </span><br><span class="line">#最大同时下载任务数</span><br><span class="line">max-concurrent-downloads=3</span><br><span class="line">#整体下载速度限制, 运行时可修改, 默认:0,0意味着没限制</span><br><span class="line">#max-overall-download-limit=0</span><br><span class="line">#单个任务下载速度限制, 默认:0</span><br><span class="line">#max-download-limit=0</span><br><span class="line">#整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line">#单个任务上传速度限制, 默认:0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line">#同服务器连接数，默认:1</span><br><span class="line">max-connection-per-server=5</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要，默认：20M</span><br><span class="line">#min-split-size=20M</span><br><span class="line">#单个文件最大线程数，默认：5</span><br><span class="line">#split=5</span><br></pre></td></tr></table></figure><p>启动：</p><p><code>sudo aria2c --conf-path=&quot;/home/pi/.aria2/aria2.conf&quot; -D</code></p><p>给 aria2c 设置启动服务:</p><p><code>sudo vim /etc/init.d/aria2c</code></p><p>文件中写入下列内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          aria2</span></span><br><span class="line"><span class="comment"># Required-Start:    $remote_fs $network</span></span><br><span class="line"><span class="comment"># Required-Stop:     $remote_fs $network</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Aria2 Downloader</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Starting aria2c"</span></span><br><span class="line">sudo -u pi aria2c --conf-path=/home/pi/.aria2/aria2.conf -D</span><br><span class="line"><span class="comment">#把上面的两个pi换成你的用户名</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Shutting down aria2c "</span></span><br><span class="line">killall aria2c</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"> </span><br><span class="line">killall aria2c</span><br><span class="line">sudo -u pi aria2c --conf-path=/home/pi/.aria2/aria2.conf -D</span><br><span class="line"><span class="comment">#把上面的两个pi换成你的用户名</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>调整权限：</p><p><code>sudo chmod 755 /etc/init.d/aria2c</code></p><p>开机自启：</p><p><code>sudo update-rc.d aria2c defaults</code></p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>安装：</p><p><code>sudo apt-get install nginx</code></p><p>配置站点属性：</p><p><code>sudo vim  /etc/nginx/sites-availiable/default</code></p><p>修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"> <span class="attribute">listen</span> <span class="number">81</span>;</span><br><span class="line"><span class="comment">#listen [::]:80 default_server;</span></span><br><span class="line"><span class="attribute">root</span> /var/www/html;</span><br><span class="line"><span class="attribute">server_name</span> pi.com;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>启动：</p><p><code>sudo /etc/init.d/nginx start</code></p><h2 id="webui-aria2"><a href="#webui-aria2" class="headerlink" title="webui-aria2"></a>webui-aria2</h2><p>通过web访问的方式控制树莓派的下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/ziahamza/webui-aria2.git</span><br><span class="line">sudo mv webui-aria2/* html/</span><br></pre></td></tr></table></figure><p>内网中浏览器直接访问树莓派IP地址:端口号即可观看到效果，记得在webui界面的设置-连接设置-密码令牌中要输入配置文件aria2.conf 中的 token。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjlsle8k95j30zf0n9gnt.jpg" alt></p><h2 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h2><p>可穿透内网的动态域名解析软件，实现外网来访问 webui-aria2 界面进行下载的管理。</p><p>本地下载树莓派版本的花生壳：</p><p><a href="http://hsk.oray.com/download/" target="_blank" rel="noopener">官网</a></p><p>将下载后的软件包上传到树莓派上。</p><p>在树莓派上 cd 到安装包的目录，接下来进行安装：</p><p><code>sudo dpkg -i phddns_rapi_3.0.1.armhf.deb</code></p><p>安装成功后，将显示此树莓派唯一的 SN 码、默认密码以及远程管理地址。</p><p>配置花生壳：</p><p>浏览器进入<a href="http://b.oray.com/" target="_blank" rel="noopener">花生壳远程管理页面</a>，输入 SN 码和默认密码 admin，首次登陆需要进行初始化，重设密码，填写手机。默认内置账户只有公网版服务，所以需要开通内网穿透功能。之后要添加两个映射，ip 对应着树莓派的局域网 ip (此ip 要进入路由器的管理界面，将树莓派设置为静态ip地址获取方式，设置时，mac地址为树莓派 wlan0 的 HWaddr),端口分别对应着 webui 的 81 端口( nginx 配置的端口)和 RPC 的 6800 端口(默认)。</p><p>外网中浏览器访问花生壳分配的对应内网 81 端口的外网 ip 地址和端口，记得在webui界面的的设置-连接设置-端口设置为花生壳分配的 RPC 端口，设置-连接设置-密码令牌中要输入配置文件 aria2.conf 中的 token。</p><p>其他：</p><p>终端输入 phddns 回车后，可以看到扩展的功能。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fjlsmfw7zxj30zd0j577p.jpg" alt></p><h2 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h2><p>文件共享服务，让局域网内可以访问。</p><p>安装 samba：</p><p><code>sudo apt-get install samba samba-common-bin</code></p><p>备份一份配置文件：</p><p><code>sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</code></p><p>编辑配置文件：</p><p><code>sudo vim /etc/samba/smb.conf</code></p><p>下面的配置是让用户可以访问自己的 home 目录。</p><p>开启用户认证：</p><p>找到####### Authentication #######,在后面添加一行 <code>security = user</code>，来使用户进行验证，禁止匿名登录。</p><p>配置用户：</p><p>在[homes]节中，把 read only = yes 改为 read only = no 。</p><p>重启 samba 服务：</p><p><code>sudo /etc/init.d/samba restart</code></p><p>添加账户到共享文件夹，设置一个密码：</p><p><code>sudo smbpasswd -a pi</code></p><p>之后在 mac 上 Finder 中共享的会看到 raspberrypi，点击连接身份，以注册用户的身份登录。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fjlsmxdgarj30mv0cq770.jpg" alt></p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>远程桌面。</p><p>安装 VNC：</p><p><code>sudo apt-get install tightvncserver</code></p><p>启动服务器：</p><p><code>vncserver :1</code></p><p>之后会提示创建密码，先是控制密码，然后是仅查看密码。</p><p>然后就可以从别的电脑的 VNC Viewer 访问了，连接时候会提示连接不安全，忽略就好。(自己本地通过192.168.1.102:5901)</p><p>给 VNC 建立启动服务：</p><p><code>sudo vim /etc/init.d/tightvncserver</code></p><p>文件中写入下列内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: tightvncserver</span></span><br><span class="line"><span class="comment"># Required-Start: $syslog $remote_fs $network</span></span><br><span class="line"><span class="comment"># Required-Stop: $syslog $remote_fs $network</span></span><br><span class="line"><span class="comment"># Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop: 0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Starts VNC Server on system start.</span></span><br><span class="line"><span class="comment"># Description: Starts tight VNC Server. Script written by James Swineson.</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /etc/init.d/tightvncserver</span></span><br><span class="line">VNCUSER=<span class="string">'pi'</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line"> start)</span><br><span class="line"> su <span class="variable">$VNCUSER</span> -c <span class="string">'/usr/bin/tightvncserver :1 -geometry 1920x1080'</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"Starting TightVNC Server for <span class="variable">$VNCUSER</span>"</span></span><br><span class="line"> ;;</span><br><span class="line"> stop)</span><br><span class="line"> pkill Xtightvnc</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"TightVNC Server stopped"</span></span><br><span class="line"> ;;</span><br><span class="line"> *)</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/tightvncserver &#123;start|stop&#125;"</span></span><br><span class="line"> <span class="built_in">exit</span> 1</span><br><span class="line"> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>调整权限：</p><p><code>sudo chmod 755 /etc/init.d/tightvncserver</code></p><p>开机自启：</p><p><code>sudo update-rc.d tightvncserver defaults</code></p><p>重启树莓派：</p><p><code>sudo reboot</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fjlsndftufj31330mkkan.jpg" alt></p><h2 id="预留问题"><a href="#预留问题" class="headerlink" title="预留问题"></a>预留问题</h2><ol><li><p>花生版免费版连接不是很稳定，并且每月只有1G的免费流量，尝试通过其他方式实现内网穿透；</p></li><li><p>由于需求量不是很大，只是初步玩一玩，所以我没挂载大容量的移动硬盘，下载机的存储空间用的还是树莓派的32G启动盘；</p></li><li><p>aria2目前还没装扩展。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇文章介绍利用 raspberrypi 搭建下载机。&lt;/p&gt;
&lt;h2 id=&quot;aria2&quot;&gt;&lt;a href=&quot;#aria2&quot; class=&quot;headerlink&quot; title=&quot;aria2&quot;&gt;&lt;/a&gt;aria2&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://aria2.github.io/manual/en/html/aria2c.html?highlight=session#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aria2&lt;/a&gt; is a utility for downloading files.&lt;/p&gt;
&lt;p&gt;安装 aria2：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install aria2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;aria2 运行的时候需要两个文件，并且需要我们手动配置，一个是配置文件 &lt;strong&gt;aria2.conf&lt;/strong&gt;，保存配置，另一个是 &lt;strong&gt;aria2.session&lt;/strong&gt;，要不每次 aria2 关闭的时候，之前下载的进度都没了。&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>raspberrypi 安装</title>
    <link href="http://yoursite.com/2018/08/12/raspberrypi%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/08/12/raspberrypi安装/</id>
    <published>2018-08-12T13:44:36.000Z</published>
    <updated>2018-11-21T14:44:39.680Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章主要介绍树莓派3代B型从刚入手后进行 Raspbian 系统的安装。</p><h2 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h2><ol><li>电源线</li><li>7寸液晶屏</li><li>散热片</li><li>蓝牙键鼠</li><li>连接显示器 HDMI-HDMI 线</li><li>外壳+风扇</li><li>32G存储的SD卡，用做硬盘(外需读卡器进行刚开始的格式化)</li></ol><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p><a href="https://www.raspberrypi.org/documentation/installation/noobs.md" target="_blank" rel="noopener">官方安装文档</a></p><p>下载 <a href="https://www.raspberrypi.org/downloads/noobs/" target="_blank" rel="noopener">NOOBS</a>;</p><p>格式化 SD 卡为 FAT 格式,利用工具<a href="https://www.sdcard.org/downloads/formatter_4/" target="_blank" rel="noopener">SD Card Formatter</a>;</p><p>解压 NOOBS.zip 到 SD 卡根目录,利用软件 <a href="http://www.kekaosx.com/zh-cn/" target="_blank" rel="noopener">Keka</a> 来进行解压;</p><p>将 SD 卡插入到树莓派对应卡槽中，接通电源，启动系统；</p><p>在安装界面选择安装 Raspbian。</p><a id="more"></a><h2 id="SSH-登录"><a href="#SSH-登录" class="headerlink" title="SSH 登录"></a>SSH 登录</h2><p>系统安装好后，查看它的局域网IP地址：<code>$ sudo ifconfig</code></p><p>更改系统设置，SSH 登录系统默认是禁止的：<br>Preferences -&gt; Raspberry Pi Configuration -&gt; Interfaces -&gt; SSH Enabled</p><p>树莓派默认用户：<strong>pi</strong>，pi 默认密码是 <strong>raspberry</strong></p><p>ssh 登录：<code>ssh pi@ip地址</code></p><p>修改密码：<code>$ passwd</code></p><h2 id="连接-WIFI"><a href="#连接-WIFI" class="headerlink" title="连接 WIFI"></a>连接 WIFI</h2><p>如果外接了显示器，则直接在屏幕右上角选择即可；</p><p>若使用 ssh 登录，则需要使用以下命令编辑 wifi 配置文件：<br><code>sudo nano /etc/wpa_supplicant/wpa_supplicant.conf</code></p><p>在文件末添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">network=&#123;</span><br><span class="line">   ssid=&quot;wifiname&quot;</span><br><span class="line">   psk=&quot;password&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启：<code>sudo reboot</code></p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>更改软件源：</p><p><code>sudo nano /etc/apt/sources.list</code></p><p>将默认的注释掉，添加：</p><p><code>deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi</code></p><blockquote><p>或者使用以下地址代替上面的地址：<br>清华大学 Raspbian <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a><br>中国科学技术大学 Raspbian <a href="http://mirrors.ustc.edu.cn/raspbian/raspbian/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/raspbian/raspbian/</a></p></blockquote><p>更改后，Ctrl+O回车保存，Ctrl+X退出nano编辑器。</p><p>更新源：</p><p><code>sudo apt-get update</code></p><p>更新已安装的包(先不执行)：</p><p><code>sudo apt-get upgrade</code></p><p>安装 vim：</p><p><code>sudo apt-get install vim</code></p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjlrdmbafsj31kw1nv4qp.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇文章主要介绍树莓派3代B型从刚入手后进行 Raspbian 系统的安装。&lt;/p&gt;
&lt;h2 id=&quot;配件&quot;&gt;&lt;a href=&quot;#配件&quot; class=&quot;headerlink&quot; title=&quot;配件&quot;&gt;&lt;/a&gt;配件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;电源线&lt;/li&gt;
&lt;li&gt;7寸液晶屏&lt;/li&gt;
&lt;li&gt;散热片&lt;/li&gt;
&lt;li&gt;蓝牙键鼠&lt;/li&gt;
&lt;li&gt;连接显示器 HDMI-HDMI 线&lt;/li&gt;
&lt;li&gt;外壳+风扇&lt;/li&gt;
&lt;li&gt;32G存储的SD卡，用做硬盘(外需读卡器进行刚开始的格式化)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;安装系统&quot;&gt;&lt;a href=&quot;#安装系统&quot; class=&quot;headerlink&quot; title=&quot;安装系统&quot;&gt;&lt;/a&gt;安装系统&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/noobs.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方安装文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载 &lt;a href=&quot;https://www.raspberrypi.org/downloads/noobs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NOOBS&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;格式化 SD 卡为 FAT 格式,利用工具&lt;a href=&quot;https://www.sdcard.org/downloads/formatter_4/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SD Card Formatter&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;解压 NOOBS.zip 到 SD 卡根目录,利用软件 &lt;a href=&quot;http://www.kekaosx.com/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keka&lt;/a&gt; 来进行解压;&lt;/p&gt;
&lt;p&gt;将 SD 卡插入到树莓派对应卡槽中，接通电源，启动系统；&lt;/p&gt;
&lt;p&gt;在安装界面选择安装 Raspbian。&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 16.04上搭建 Shadowsocks</title>
    <link href="http://yoursite.com/2018/08/10/%E5%9C%A8Ubuntu16%E4%B8%8A%E6%90%AD%E5%BB%BAshadowsocks/"/>
    <id>http://yoursite.com/2018/08/10/在Ubuntu16上搭建shadowsocks/</id>
    <published>2018-08-10T13:44:36.000Z</published>
    <updated>2019-01-15T08:57:47.302Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍在 VPS(bandwagon,系统为 Ubuntu 16.04)上搭建 shadowsocks 和 shadowsocksR 服务。本机上使用 <a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">ShadowsocksX-NG</a> 客户端,并实现命令行终端走代理模式。</p><h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><p>登录<a href="https://bandwagonhost.com/clientarea.php" target="_blank" rel="noopener">Client Area</a>,在 My Servers 里选择对应的 VPS 进入控制面板，由于刚买的 bandwagon 自带 centos，自己把系统重装为 Ubuntu 16.04 x86_64 (个人偏爱)，重装完成后会告诉你 root 密码和 ssh 端口号。</p><p>远程 ssh 登录修改 root 密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip -p port</span><br><span class="line">passwd</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="搭建-ss"><a href="#搭建-ss" class="headerlink" title="搭建 ss"></a>搭建 ss</h3><ol><li><p>准备：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">apt install python3-pip</span><br><span class="line">apt install shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>修改 /etc/shadowsocks/config.json (该文件已存在)的以下内容：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server为vps的ip</span><br><span class="line">修改server_port</span><br><span class="line">修改password</span><br></pre></td></tr></table></figure></li><li><p>测试 ss 是否可用：</p><p> <code>ssserver -c /etc/shadowsocks/config.json</code></p></li><li><p>配置 Systemd 管理 Shadowsocks,<code>vi /etc/systemd/system/shadowsocks-server.service</code> :</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks Server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json</span><br><span class="line">Restart=on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>启动 ss：</p><p> <code>systemctl start shadowsocks-server</code></p></li><li><p>设置开机启动 ss：</p><p> <code>systemctl enable shadowsocks-server</code></p></li></ol><h3 id="开启-BBR"><a href="#开启-BBR" class="headerlink" title="开启 BBR"></a>开启 BBR</h3><pre><code>linux 内核版本要高于 4.9，才支持 BBR。</code></pre><ol><li><p>准备：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uname -a  <span class="comment"># 查看目前的内核版本</span></span><br><span class="line">dpkg --get-selections |grep linux-image  <span class="comment"># 查看安装的内核</span></span><br><span class="line">apt update  <span class="comment"># 更新源</span></span><br><span class="line">apt-cache showpkg linux-image  <span class="comment"># 查看可用的 linux 内核版本</span></span><br><span class="line">apt install linux-image-4.11.0-14-generic  <span class="comment"># 安装内核</span></span><br></pre></td></tr></table></figure></li><li><p>重启：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br><span class="line">uname -a</span><br><span class="line">apt autoremove  <span class="comment">#自动删除旧版本</span></span><br></pre></td></tr></table></figure></li><li><p>开启 BBR：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">lsmod | grep bbr  <span class="comment">#如果看到 tcp_bbaptr 则表示开启成功</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="利用-Docker-搭建-ss"><a href="#利用-Docker-搭建-ss" class="headerlink" title="利用 Docker 搭建 ss"></a>利用 Docker 搭建 ss</h3><p><a href="https://github.com/shadowsocks/shadowsocks-libev#debian--ubuntu" target="_blank" rel="noopener">参考链接</a></p><ol><li><p>准备：安装好 Docker</p><p> <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Docker 官方安装教程</a></p></li><li><p>编写 Dockerfile:</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt install -y shadowsocks-libev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt autoremove</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"/usr/bin/ss-server"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>在 Dockerfile 文件路径下，docker build:</p><p> <code>sudo docker build -t ssdocker:v1 .</code></p></li><li><p>查看镜像是否构建成功：</p><p> <code>sudo docker image ls -a</code></p></li><li><p>docker run：</p><p> <code>sudo docker run --restart=always -d -p 12137:12137 ssdocker:v1 -s 0.0.0.0 -p 12137 -k mypassword -m aes-256-cfb</code></p></li><li><p>查看 ss 容器是否启动成功：</p><p> <code>sudo docker container ls -a</code></p></li></ol><h2 id="shadowsocksR"><a href="#shadowsocksR" class="headerlink" title="shadowsocksR"></a>shadowsocksR</h2><h3 id="搭建-ssr"><a href="#搭建-ssr" class="headerlink" title="搭建 ssr"></a>搭建 ssr</h3><ol><li><p>获取源代码：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b manyuser https://github.com/shadowsocksr-backup/shadowsocksr.git </span><br><span class="line"><span class="built_in">cd</span> shadowsocksr</span><br><span class="line">bash initcfg.sh</span><br></pre></td></tr></table></figure></li><li><p>修改 shadowsocksr 目录下的 user-config.json 配置文件:</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"server_port":port,         //端口</span><br><span class="line">"password":"password",     //密码</span><br><span class="line">"protocol":"auth_sha1_v4",       //协议插件</span><br><span class="line">"obfs":"http_simple",      //混淆插件</span><br><span class="line">"method":"aes-256-cfb",    //加密方式</span><br></pre></td></tr></table></figure></li><li><p>配置 Systemd 管理 shadowsocksR,<code>vi /etc/systemd/system/shadowsocksr-server.service</code>,注意修改shadowsocksr的目录:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=ShadowsocksR server</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/shadowsocksr.pid</span><br><span class="line">ExecStart=/usr/bin/python /root/git-clone-repository/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocksr.pid -c /root/git-clone-repository/shadowsocksr/user-config.json -d start</span><br><span class="line">ExecStop=/usr/bin/python /root/git-clone-repository/shadowsocksr/shadowsocks/server.py --pid-file /var/run/shadowsocksr.pid -c /root/git-clone-repository/shadowsocksr/user-config.json -d stop</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>启动 ssr：</p><p> <code>systemctl start shadowsocksr-server</code></p></li><li><p>设置开机启动 ssr：</p><p> <code>systemctl enable shadowsocksr-server</code></p></li></ol><h3 id="利用-Docker-搭建-ssr"><a href="#利用-Docker-搭建-ssr" class="headerlink" title="利用 Docker 搭建 ssr"></a>利用 Docker 搭建 ssr</h3><p><a href="https://github.com/shadowsocksr-backup/shadowsocks-rss/wiki/Server-Setup" target="_blank" rel="noopener">参考链接：ShadowsocksR 服务端安装教程</a></p><ol><li><p>准备：安装好 Docker</p><p> <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Docker 官方安装教程</a></p></li><li><p>获取 ssr 源代码：</p><p> <code>git clone -b manyuser https://github.com/shadowsocksr-backup/shadowsocksr.git</code></p></li><li><p>初始化配置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> shadowsocksr</span><br><span class="line">bash initcfg.sh</span><br></pre></td></tr></table></figure></li><li><p>编写 Dockerfile:</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update &amp;&amp; \</span></span><br><span class="line"><span class="bash">apt install -y python &amp;&amp; \</span></span><br><span class="line"><span class="bash">apt autoremove</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /ssdir</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . .</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"python"</span>,<span class="string">"/ssdir/shadowsocksr/shadowsocks/server.py"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>在 Dockerfile 文件路径下，docker build:</p><p> <code>sudo docker build -t ssrdocker:v1 .</code></p></li><li><p>查看镜像是否构建成功：</p><p> <code>sudo docker image ls -a</code></p></li><li><p>docker run：</p><p> <code>sudo docker run --restart=always -d -p 12138:12138 ssrdocker:v1 -p 12138 -k mypassword -m aes-256-cfb -O auth_sha1_v4 -o http_simple</code></p></li><li><p>查看 ss 容器是否启动成功：</p><p> <code>sudo docker container ls -a</code></p></li></ol><h2 id="ShadowsocksX-NG"><a href="#ShadowsocksX-NG" class="headerlink" title="ShadowsocksX-NG"></a>ShadowsocksX-NG</h2><p>在<a href="https://github.com/shadowsocks/ShadowsocksX-NG" target="_blank" rel="noopener">ShadowsocksX-NG</a>的github上进行下载。</p><h2 id="proxy-shell"><a href="#proxy-shell" class="headerlink" title="proxy shell"></a>proxy shell</h2><p>实现命令行终端走代理模式。</p><ol><li><p>在 .zshrc 中添加如下内容：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># proxy on command-line</span></span><br><span class="line"><span class="function"><span class="title">proxyon</span></span>()&#123;</span><br><span class="line">    <span class="built_in">export</span> http_proxy=http://127.0.0.1:1087</span><br><span class="line">    <span class="built_in">export</span> https_proxy=http://127.0.0.1:1087</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" command-line proxy on "</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">proxyoff</span></span>()&#123;</span><br><span class="line">    <span class="built_in">unset</span> http_proxy</span><br><span class="line">    <span class="built_in">unset</span> https_proxy</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" command-line proxy off "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启：<code>proxyon</code></p></li><li><p>停止：<code>proxyoff</code></p></li><li><p>通过 <code>curl http://ipinfo.io/</code> 验证命令行是否在代理模式下。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍在 VPS(bandwagon,系统为 Ubuntu 16.04)上搭建 shadowsocks 和 shadowsocksR 服务。本机上使用 &lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowsocksX-NG&lt;/a&gt; 客户端,并实现命令行终端走代理模式。&lt;/p&gt;
&lt;h2 id=&quot;shadowsocks&quot;&gt;&lt;a href=&quot;#shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;shadowsocks&quot;&gt;&lt;/a&gt;shadowsocks&lt;/h2&gt;&lt;p&gt;登录&lt;a href=&quot;https://bandwagonhost.com/clientarea.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Client Area&lt;/a&gt;,在 My Servers 里选择对应的 VPS 进入控制面板，由于刚买的 bandwagon 自带 centos，自己把系统重装为 Ubuntu 16.04 x86_64 (个人偏爱)，重装完成后会告诉你 root 密码和 ssh 端口号。&lt;/p&gt;
&lt;p&gt;远程 ssh 登录修改 root 密码：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh root@ip -p port&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;passwd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="Shadowsocks" scheme="http://yoursite.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>你好 成都</title>
    <link href="http://yoursite.com/2017/10/01/%E4%BD%A0%E5%A5%BD%E6%88%90%E9%83%BD/"/>
    <id>http://yoursite.com/2017/10/01/你好成都/</id>
    <published>2017-10-01T13:44:36.000Z</published>
    <updated>2018-11-21T14:16:24.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>成都 带不走的 只有你<br>和我在成都的街头走一走 喔…</p></blockquote><p>先来一波图，不过我自己没怎么拍照，大多找同学要的，尴尬。。</p><a id="more"></a><p>都江堰：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkccgaj2cxj31kw16oe82.jpg" alt></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkcd49wrfpj31kw16ongo.jpg" alt></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkcd5e4nq7j31kw16o7wi.jpg" alt></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkcd5m0q1nj31kw16o4qp.jpg" alt></p><p>熊猫基地：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkcdm3usluj31kw23vnpd.jpg" alt></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkcdmga3l4j31kw23vhdt.jpg" alt></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkcdii4q1jj31kw23vnpe.jpg" alt></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkcd337346j31kw16oe81.jpg" alt></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkcd3e5ld4j31kw16o1ky.jpg" alt></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fkcdjzrlb7j31kw23vnpe.jpg" alt></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fkcdgv6nxmj31kw23v7wi.jpg" alt></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkcd3z7amxj31kw16o4ks.jpg" alt></p><p>地铁熊猫卡：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkcd60gik3j31kw16oe81.jpg" alt></p><p>熊猫基地纪念卡：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkcd4othznj31kw23vhdt.jpg" alt></p><p>在成都的这几天，是我玩过最舒服自在的一次旅途了。</p><p>第一次坐长达31个小时还晚点两个小时的火车，到成都大概早上7点多的样子。下着小雨，直接打滴滴就去了电子科大，一大早就让表弟来接我，他宿舍的哥们都还在睡觉，放下东西给手机充了点电。表弟带我吃了早餐，在校区转了转，不由得感慨，绿化是真的棒，别人的大学lol。只感慨，当初没有好好的享受大学生活，对母校还有点想念，以后得抽个空回去转转，一定！！</p><p>大概下午三点多跟表弟分开，去了小胖那，几个月没见，他还是那样，成都的租房完全没法跟帝都比，同等价位简直豪华套间。晚上跟胖一起去接了我大学的上铺帅，两年多没见，真是胖了不少，感慨这次的旅途让我们再次相遇。由于当天坐车都累了，第二天大早要去熊猫基地，我们没聊太久就睡了。</p><p>时间有限，也是本着吃的目的来的，景点就只去了熊猫基地跟都江堰，这两个景点也是非常值得去的。一天两顿大餐，也是满足了我此行的目的。</p><p>没法想像这三个人打斗地主竟然打到凌晨三点。</p><p>整个路途下来让我没法适应的也就只有在地铁站找公厕了，这点跟帝都比，差距还是有点大。</p><p>国庆这趟旅途真是感谢小胖的盛情招待，跟大学上铺的短暂相聚，很幸运。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;成都 带不走的 只有你&lt;br&gt;和我在成都的街头走一走 喔…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来一波图，不过我自己没怎么拍照，大多找同学要的，尴尬。。&lt;/p&gt;
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>再见了，我的 24</title>
    <link href="http://yoursite.com/2017/09/12/%E6%88%91%E7%9A%8424/"/>
    <id>http://yoursite.com/2017/09/12/我的24/</id>
    <published>2017-09-12T13:44:36.000Z</published>
    <updated>2018-08-23T12:58:17.855Z</updated>
    
    <content type="html"><![CDATA[<p>  像往常一样，忙忙碌碌的一天工作，安安静静的告别了24，来到了25。</p><p>  工作以后，不再像以前那样，对生日充满特别的期待。</p><p>  这一年，5月4日离开了上家公司，6月1日入职了目前这家。离职总是伴随着各种各样的原因，但很感激毕业后在里面的两年舒适环境，也很感谢我的师父、组长以及带我的同事。因为舒适，伴随而来的就是待遇的不如意，工资的原因会让我显得不自信，不自信带来的是更加的迷茫，这也是我认为最重要的一点，所以我还是裸辞了。为什么裸辞呢，中间有个小插曲，我在此就不说了。</p><p>  这一年，我终于考完了拖了一年多的驾照，幸好一次通过，在等待领取驾照的间隙还给每个教练买了个巧乐滋和一瓶百岁山。由于家离驾校很远，来回路程将近5个小时，依稀记得那个在地铁上累熏熏的我。</p><p>  这一年，我爱折腾。2k显示屏、树莓派、kindle、香薰机…当然，最重要的是犹豫再三的一加5(刷机小王子)，由于没抢到发布会门票差点放弃，拖了两个月最终还是买了。最后，还搭建了人生中的第一个博客(没错，就是你现在看到的这个)。</p><p>  接下来的日子，要协调好对生活和工作的态度，要多多睡觉(由于自己觉少，睡眠质量一般，导致常常休息不过来)，熟练双拼，多多读书，多多锻炼，顺便学学日语(并没有很复杂的动机)。</p><p>  工作服务于生活，不能压榨生活。</p><p>  生活在于折腾。</p><p>  就这样吧，刚学双拼，打这段话可费死老劲了，希望以后的自己越来越好！</p>  <a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  像往常一样，忙忙碌碌的一天工作，安安静静的告别了24，来到了25。&lt;/p&gt;
&lt;p&gt;  工作以后，不再像以前那样，对生日充满特别的期待。&lt;/p&gt;
&lt;p&gt;  这一年，5月4日离开了上家公司，6月1日入职了目前这家。离职总是伴随着各种各样的原因，但很感激毕业后在里面的两年舒适环境，也很感谢我的师父、组长以及带我的同事。因为舒适，伴随而来的就是待遇的不如意，工资的原因会让我显得不自信，不自信带来的是更加的迷茫，这也是我认为最重要的一点，所以我还是裸辞了。为什么裸辞呢，中间有个小插曲，我在此就不说了。&lt;/p&gt;
&lt;p&gt;  这一年，我终于考完了拖了一年多的驾照，幸好一次通过，在等待领取驾照的间隙还给每个教练买了个巧乐滋和一瓶百岁山。由于家离驾校很远，来回路程将近5个小时，依稀记得那个在地铁上累熏熏的我。&lt;/p&gt;
&lt;p&gt;  这一年，我爱折腾。2k显示屏、树莓派、kindle、香薰机…当然，最重要的是犹豫再三的一加5(刷机小王子)，由于没抢到发布会门票差点放弃，拖了两个月最终还是买了。最后，还搭建了人生中的第一个博客(没错，就是你现在看到的这个)。&lt;/p&gt;
&lt;p&gt;  接下来的日子，要协调好对生活和工作的态度，要多多睡觉(由于自己觉少，睡眠质量一般，导致常常休息不过来)，熟练双拼，多多读书，多多锻炼，顺便学学日语(并没有很复杂的动机)。&lt;/p&gt;
&lt;p&gt;  工作服务于生活，不能压榨生活。&lt;/p&gt;
&lt;p&gt;  生活在于折腾。&lt;/p&gt;
&lt;p&gt;  就这样吧，刚学双拼，打这段话可费死老劲了，希望以后的自己越来越好！&lt;/p&gt;
    
    </summary>
    
      <category term="生活杂记" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>VPS 上搭建 Typecho</title>
    <link href="http://yoursite.com/2017/08/11/VPS%E4%B8%8A%E6%90%AD%E5%BB%BATypecho/"/>
    <id>http://yoursite.com/2017/08/11/VPS上搭建Typecho/</id>
    <published>2017-08-11T13:44:36.000Z</published>
    <updated>2018-11-21T14:45:02.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>念念不忘，必有回响</p></blockquote><p><a href="http://typecho.org/" target="_blank" rel="noopener">Typecho</a> 是一个强大的个人博客系统，是基于 PHP 开发的非常轻量级的博客框架，原生支持 Markdown 排版语法，易读更易写。Typecho 的特点：轻量高效、先进稳定、简洁友好。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>VPS</li><li>域名</li><li>nginx</li><li>php7.0</li><li>sqlite3</li></ul><h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p><a href="https://bandwagonhost.com/aff.php?aff=18070&amp;a=add&amp;pid=56" target="_blank" rel="noopener">bandwagon</a><br>得到服务器及 IP,自己重新安装了 Ubuntu 16.04 x86_64 系统。(512 MB  的内存，10G的硬盘容量，每月500G流量)</p><h4 id="域名注册"><a href="#域名注册" class="headerlink" title="域名注册"></a>域名注册</h4><p><a href="https://sg.godaddy.com/" target="_blank" rel="noopener">godaddy</a><br>购买了一年的有效期 <del>freeblog.me</del>(已弃用)</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p><a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a><br>进入DNSPod中添加自己的域名及对应的服务器IP，同时要去godaddy中将你的Nameservers修改成DNSPod自家的，等几分钟就好了，<code>ping  freeblog.me</code> 可查看到你的服务器IP，域名解析成功。</p><a id="more"></a><h4 id="远程登录到服务器"><a href="#远程登录到服务器" class="headerlink" title="远程登录到服务器"></a>远程登录到服务器</h4><p>自己登录的 root 用户。<br>根据 <a href="http://typecho.org/" target="_blank" rel="noopener">typecho</a> 对服务器的要求，需要安装以下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx</span><br><span class="line">apt install sqlite3</span><br><span class="line">apt install php7.0</span><br><span class="line">apt install php7.0-sqlite3</span><br><span class="line">apt install php7.0-curl</span><br></pre></td></tr></table></figure><p>官网下载 typecho 1.0正式稳定版的压缩包并上传到服务器的 /var/www/，<code>tar -xzf 1.0.14.10.10.-release.tar.gz</code>,解压完会出现 build 目录，对该目录赋权限<code>chmod  -Rf 755 *</code>。并新增 /var/www/log/freeblog/access_log 和 /var/www/log/freeblog/error_log 用来存放 nginx 的日志。</p><p>启动nginx配置：</p><p><code>service nginx start</code></p><p>浏览器访问服务器ip可看到 nginx 的欢迎界面。</p><p>nginx 修改配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available</span><br><span class="line">vi freeblog</span><br></pre></td></tr></table></figure><p>freeblog文件中添加如下内容：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>     freeblog.me;</span><br><span class="line"><span class="attribute">root</span>            /var/www/build;</span><br><span class="line"><span class="attribute">access_log</span>/var/www/log/freeblog/access_log;</span><br><span class="line"><span class="attribute">error_log</span>/var/www/log/freeblog/error_log;</span><br><span class="line"><span class="attribute">index</span>           index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /index.php<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.php(\/.*)*$</span> &#123;</span><br><span class="line"><span class="attribute">include</span> fastcgi.conf;</span><br><span class="line"><span class="attribute">fastcgi_pass</span>  unix:/run/php/php7.0-fpm.sock;  <span class="comment"># 注意：typecho 官网给的配置为 127.0.0.1:9000,使用此方式浏览器会报 502 错，在/etc/php/7.0/fpm/pool.d/www.conf 文件中可看到 listen = /run/php/php7.0-fpm.sock。所以要对 fastcgi_pass 进行修改。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编辑完成后要:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-enabled</span><br><span class="line">rm -f default</span><br><span class="line">ln -s /etc/nginx/sites-available/freeblog .</span><br></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service php7.0-fpm restart</span><br><span class="line">service nginx reload  或  service nginx restart</span><br></pre></td></tr></table></figure><p>创建sqlite3数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/build/usr</span><br><span class="line">sqlite3 freeblog.db  <span class="comment"># 可创建sqlite数据库，.database 查看数据库， .exit 退出数据库</span></span><br><span class="line">chmod 666 freeblog.db</span><br><span class="line">chmod 777 /var/www/build/usr  <span class="comment"># 注意：不加此权限安装时浏览器会报500数据库错误</span></span><br></pre></td></tr></table></figure><p>浏览器中输入 freeblog.me 进行typecho的安装</p><p>进入首页，点击第一篇文档的链接，浏览器会报500的错误，查看nginx记录的错误日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Uncaught TypeError: Argument 1 passed to Typecho_Common::exceptionHandle() must be an instance of Exception, instance of Error given in /var/www/html/blog/var/Typecho/Common.php:235 Stack trace: #0 [internal function]: Typecho_Common::exceptionHandle(Object(Error)) #1 &#123;main&#125; thrown in /var/www/html/blog/var/Typecho/Common.php on line 235</span><br></pre></td></tr></table></figure><p>此时要打开 /var/www/html/blog/var/Typecho/Common.php ，找到 exceptionHandle() 函数，把该函数的参数改为<code>exceptionHandle(Throwable $exception)</code>。</p><p>再次刷新第一篇文章的页面，页面提示 <code>Call to undefined function utf8_decode()</code>，此时 <code>apt install php7.0-xml</code> ，重启nginx即可。</p><h4 id="Certbot-配置-Let’s-Encrypt-SSL-安全证书"><a href="#Certbot-配置-Let’s-Encrypt-SSL-安全证书" class="headerlink" title="Certbot 配置 Let’s Encrypt SSL 安全证书"></a>Certbot 配置 Let’s Encrypt SSL 安全证书</h4><p>获取certbot客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line">chmod a+x ./certbot-auto</span><br><span class="line">./certbot-auto --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>配置 nginx 、验证域名所有权,在/etc/nginx/sites-available/freeblog中添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">        <span class="attribute">default_type</span> <span class="string">"text/plain"</span>;</span><br><span class="line">        <span class="attribute">root</span> /var/www/build;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> = /.well-known/acme-challenge/ &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载nginx:</p><p><code>service nginx reload</code></p><p>生成证书(要在安装客户端的目录下执行):</p><p><code>./certbot-auto certonly --webroot -w /var/www/build -d freeblog.me</code></p><p>证书生成成功后会有提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line">   /etc/letsencrypt/live/freeblog.me/fullchain.pem</span><br><span class="line">   Your key file has been saved at:</span><br><span class="line">   /etc/letsencrypt/live/freeblog.me/privkey.pem</span><br><span class="line">   Your cert will expire on 2017-11-24. To obtain a new or tweaked version of this certificate in the future, simply run certbot-auto again. To non-interactively renew *all* of your certificates, run</span><br><span class="line">   &quot;certbot-auto renew&quot;</span><br><span class="line"> - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal.</span><br></pre></td></tr></table></figure><p>继续配置nginx,最后/etc/nginx/sites-available/freeblog的内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> freeblog.me;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">443</span> ssl http2;</span><br><span class="line">        <span class="attribute">server_name</span>     freeblog.me;</span><br><span class="line">        <span class="attribute">root</span>            /var/www/build;</span><br><span class="line">        <span class="attribute">access_log</span>      /var/www/log/freeblog/access_log;</span><br><span class="line">        <span class="attribute">error_log</span>       /var/www/log/freeblog/error_log;</span><br><span class="line">        <span class="attribute">index</span>           index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      /etc/letsencrypt/live/freeblog.me/fullchain.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>     /etc/letsencrypt/live/freeblog.me/privkey.pem;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span><span class="regexp"> ^~</span> /.well-known/acme-challenge/ &#123;</span><br><span class="line">                <span class="attribute">default_type</span> <span class="string">"text/plain"</span>;</span><br><span class="line"><span class="attribute">root</span>/var/www/build;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> = /.well-known/acme-challenge/ &#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /index.php<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .*\.php(\/.*)*$</span> &#123;</span><br><span class="line">                <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">                <span class="attribute">fastcgi_pass</span>  unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载nginx，<code>service nginx reload</code>，之后浏览器重新查看 freeblog.me，可观察到已经https了。</p><p>可从证书生成的提示中看到证书有效期只有90天，所以每三个月需要更新一次安全证书。用crontab定时任务，每两个月的周六1:30更新证书和1:35重载nginx:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30 1 * */2 6 /root/download/certbot-auto renew --quiet --no-self-upgrade &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">35 1 * */2 6 /etc/init.d/nginx reload</span><br></pre></td></tr></table></figure><h4 id="启用-HSTS"><a href="#启用-HSTS" class="headerlink" title="启用 HSTS"></a>启用 HSTS</h4><p>HSTS 是“HTTP Strict Transport Security”（HTTP严格安全传输）的缩写。</p><p>访问网站时，用户很少直接在地址栏输入 https，总是通过点击链接，或者3xx重定向，从 HTTP 页面进入 HTTPS 页面。攻击者完全可以在用户发出HTTP请求时，劫持并篡改该请求。</p><p>HSTS 的作用就是强制浏览器只能发出 HTTPS 请求，并阻止用户接受不安全的证书。</p><p>在nginx配置文件中加入：</p><p><code>Strict-Transport-Security: max-age=31536000; includeSubDomains; preload;</code></p><p>申请 HSTS Preloading List：</p><p><a href="https://hstspreload.org/" target="_blank" rel="noopener">HSTS Preloading List</a> 是一个网站列表，它被硬编码到chrome浏览器中，仅仅通过https访问。我从申请开始到通过大概花了3天多时间。</p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>简约主题:<a href="https://github.com/pagecho/maupassant" target="_blank" rel="noopener">maupassant</a>。</p><p>目前所用主题:<a href="https://github.com/chakhsu/pinghsu" target="_blank" rel="noopener">pinghsu</a>。</p><h4 id="实现首页不显示全文"><a href="#实现首页不显示全文" class="headerlink" title="实现首页不显示全文"></a>实现首页不显示全文</h4><p>第一种方式是编辑文章时利用 <code>&lt;!–more–&gt;</code> 标签显示文章的摘要。(推荐)</p><p>第二种方式是网页登录到博客后台，修改主题的代码(需要给主题目录 /var/www/build/usr/themes 写权限<code>chmod -Rf 777 themes</code>,顺便我也给了plugins和uploads权限，<code>chmod -Rf 777 plugins</code>，<code>chmod -Rf 777 uploads</code>)。在index.php文件找到代码 <code>&lt;?php $this-&gt;content(&#39;阅读剩余部分...&#39;); ?&gt;</code>, 将其替换为<code>&lt;?php $this-&gt;excerpt(300, &#39;...&#39;); ?&gt;</code>, 即显示300个字节，同时在archive.php中进行相同的修改操作。这种方式在首页不会显示内容的markdown格式。</p><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>在maupassant主题上增加代码高亮，我用的<a href="http://prismjs.com/download.html" target="_blank" rel="noopener">Prism</a>, 勾选需要支持的语言, 下载prism.css和prism.js, 上传至服务器 /var/www/build/usr/themes/maupassant 目录下, 即上传到自己的主题下面, 同时要在浏览器中修改自己主题下面的header.php,在 <code>&lt;/head&gt;</code> 之前添加  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--代码高亮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;?php $this-&gt;options-&gt;themeUrl('prism.css'); ?&gt;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;?php $this-&gt;options-&gt;themeUrl('prism.js'); ?&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;念念不忘，必有回响&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://typecho.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typecho&lt;/a&gt; 是一个强大的个人博客系统，是基于 PHP 开发的非常轻量级的博客框架，原生支持 Markdown 排版语法，易读更易写。Typecho 的特点：轻量高效、先进稳定、简洁友好。&lt;/p&gt;
&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;VPS&lt;/li&gt;
&lt;li&gt;域名&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;php7.0&lt;/li&gt;
&lt;li&gt;sqlite3&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;VPS&quot;&gt;&lt;a href=&quot;#VPS&quot; class=&quot;headerlink&quot; title=&quot;VPS&quot;&gt;&lt;/a&gt;VPS&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://bandwagonhost.com/aff.php?aff=18070&amp;amp;a=add&amp;amp;pid=56&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bandwagon&lt;/a&gt;&lt;br&gt;得到服务器及 IP,自己重新安装了 Ubuntu 16.04 x86_64 系统。(512 MB  的内存，10G的硬盘容量，每月500G流量)&lt;/p&gt;
&lt;h4 id=&quot;域名注册&quot;&gt;&lt;a href=&quot;#域名注册&quot; class=&quot;headerlink&quot; title=&quot;域名注册&quot;&gt;&lt;/a&gt;域名注册&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://sg.godaddy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;godaddy&lt;/a&gt;&lt;br&gt;购买了一年的有效期 &lt;del&gt;freeblog.me&lt;/del&gt;(已弃用)&lt;/p&gt;
&lt;h4 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://www.dnspod.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DNSPod&lt;/a&gt;&lt;br&gt;进入DNSPod中添加自己的域名及对应的服务器IP，同时要去godaddy中将你的Nameservers修改成DNSPod自家的，等几分钟就好了，&lt;code&gt;ping  freeblog.me&lt;/code&gt; 可查看到你的服务器IP，域名解析成功。&lt;/p&gt;
    
    </summary>
    
      <category term="VPS" scheme="http://yoursite.com/categories/VPS/"/>
    
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
      <category term="Typecho" scheme="http://yoursite.com/tags/Typecho/"/>
    
  </entry>
  
</feed>
